
EXAMPLE_SLIDER_PWM_BUTTON_NEXTION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800553c  0800553c  0001553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005828  08005828  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000074  080058a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080058a4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6fb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d15  00000000  00000000  0002d79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00030138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c27  00000000  00000000  00030d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbe3  00000000  00000000  00052937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbe1c  00000000  00000000  0005f51a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  0012b38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005524 	.word	0x08005524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005524 	.word	0x08005524

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058c:	f001 f934 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000590:	f000 f9ea 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fbc8 	bl	8000d28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000598:	f000 fb9c 	bl	8000cd4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800059c:	f000 fb00 	bl	8000ba0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005a0:	f000 fa9a 	bl	8000ad8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005a4:	f000 fa4a 	bl	8000a3c <MX_TIM2_Init>
  MX_TIM6_Init();
 80005a8:	f000 fb5e 	bl	8000c68 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);      //DHT 11 gecikme hesaplama
 80005ac:	48a5      	ldr	r0, [pc, #660]	; (8000844 <main+0x2bc>)
 80005ae:	f002 f927 	bl	8002800 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);   //DHT 11 1 saniyede bir deger okumak icin
 80005b2:	48a5      	ldr	r0, [pc, #660]	; (8000848 <main+0x2c0>)
 80005b4:	f002 f98c 	bl	80028d0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);   // slider1
 80005b8:	2108      	movs	r1, #8
 80005ba:	48a4      	ldr	r0, [pc, #656]	; (800084c <main+0x2c4>)
 80005bc:	f002 fa48 	bl	8002a50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);   // slider2
 80005c0:	210c      	movs	r1, #12
 80005c2:	48a2      	ldr	r0, [pc, #648]	; (800084c <main+0x2c4>)
 80005c4:	f002 fa44 	bl	8002a50 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // 1. servo
 80005c8:	2100      	movs	r1, #0
 80005ca:	48a1      	ldr	r0, [pc, #644]	; (8000850 <main+0x2c8>)
 80005cc:	f002 fa40 	bl	8002a50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // 2. servo
 80005d0:	2104      	movs	r1, #4
 80005d2:	489f      	ldr	r0, [pc, #636]	; (8000850 <main+0x2c8>)
 80005d4:	f002 fa3c 	bl	8002a50 <HAL_TIM_PWM_Start>

  HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, sprintf((char*)tx_buffer,"t0.txt=\"baglanti kuruldu\""), 100);
 80005d8:	499e      	ldr	r1, [pc, #632]	; (8000854 <main+0x2cc>)
 80005da:	489f      	ldr	r0, [pc, #636]	; (8000858 <main+0x2d0>)
 80005dc:	f003 fd2a 	bl	8004034 <siprintf>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	499c      	ldr	r1, [pc, #624]	; (8000858 <main+0x2d0>)
 80005e8:	489c      	ldr	r0, [pc, #624]	; (800085c <main+0x2d4>)
 80005ea:	f003 f998 	bl	800391e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, cmdEnd, 3, 100);
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	2203      	movs	r2, #3
 80005f2:	499b      	ldr	r1, [pc, #620]	; (8000860 <main+0x2d8>)
 80005f4:	4899      	ldr	r0, [pc, #612]	; (800085c <main+0x2d4>)
 80005f6:	f003 f992 	bl	800391e <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, rx_buffer, 50, 100);
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	2232      	movs	r2, #50	; 0x32
 80005fe:	4999      	ldr	r1, [pc, #612]	; (8000864 <main+0x2dc>)
 8000600:	4896      	ldr	r0, [pc, #600]	; (800085c <main+0x2d4>)
 8000602:	f003 fa1e 	bl	8003a42 <HAL_UART_Receive>
	  memcpy(str, rx_buffer, 50);
 8000606:	2232      	movs	r2, #50	; 0x32
 8000608:	4996      	ldr	r1, [pc, #600]	; (8000864 <main+0x2dc>)
 800060a:	4897      	ldr	r0, [pc, #604]	; (8000868 <main+0x2e0>)
 800060c:	f003 fcfc 	bl	8004008 <memcpy>

	  token = strtok(str, " ");
 8000610:	4996      	ldr	r1, [pc, #600]	; (800086c <main+0x2e4>)
 8000612:	4895      	ldr	r0, [pc, #596]	; (8000868 <main+0x2e0>)
 8000614:	f003 fd36 	bl	8004084 <strtok>
 8000618:	4603      	mov	r3, r0
 800061a:	4a95      	ldr	r2, [pc, #596]	; (8000870 <main+0x2e8>)
 800061c:	6013      	str	r3, [r2, #0]
	  strcpy(component_id, token);
 800061e:	4b94      	ldr	r3, [pc, #592]	; (8000870 <main+0x2e8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	4893      	ldr	r0, [pc, #588]	; (8000874 <main+0x2ec>)
 8000626:	f003 fd25 	bl	8004074 <strcpy>
	  token = strtok(NULL, " ");
 800062a:	4990      	ldr	r1, [pc, #576]	; (800086c <main+0x2e4>)
 800062c:	2000      	movs	r0, #0
 800062e:	f003 fd29 	bl	8004084 <strtok>
 8000632:	4603      	mov	r3, r0
 8000634:	4a8e      	ldr	r2, [pc, #568]	; (8000870 <main+0x2e8>)
 8000636:	6013      	str	r3, [r2, #0]
	  strcpy(slider_deger, token);
 8000638:	4b8d      	ldr	r3, [pc, #564]	; (8000870 <main+0x2e8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	488e      	ldr	r0, [pc, #568]	; (8000878 <main+0x2f0>)
 8000640:	f003 fd18 	bl	8004074 <strcpy>



	  if(strcmp(component_id, "AB") == 0)
 8000644:	498d      	ldr	r1, [pc, #564]	; (800087c <main+0x2f4>)
 8000646:	488b      	ldr	r0, [pc, #556]	; (8000874 <main+0x2ec>)
 8000648:	f7ff fdc2 	bl	80001d0 <strcmp>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d138      	bne.n	80006c4 <main+0x13c>
	  {
		  if(servo_1 % 2 == 0)
 8000652:	4b8b      	ldr	r3, [pc, #556]	; (8000880 <main+0x2f8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d10b      	bne.n	8000678 <main+0xf0>
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	4887      	ldr	r0, [pc, #540]	; (8000884 <main+0x2fc>)
 8000668:	f001 fbfe 	bl	8001e68 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800066c:	4b78      	ldr	r3, [pc, #480]	; (8000850 <main+0x2c8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	e00a      	b.n	800068e <main+0x106>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067e:	4881      	ldr	r0, [pc, #516]	; (8000884 <main+0x2fc>)
 8000680:	f001 fbf2 	bl	8001e68 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 8000684:	4b72      	ldr	r3, [pc, #456]	; (8000850 <main+0x2c8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800068c:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  servo_1++;
 800068e:	4b7c      	ldr	r3, [pc, #496]	; (8000880 <main+0x2f8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <main+0x2f8>)
 8000698:	701a      	strb	r2, [r3, #0]
		  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	2100      	movs	r1, #0
 800069e:	4871      	ldr	r0, [pc, #452]	; (8000864 <main+0x2dc>)
 80006a0:	f003 fcc0 	bl	8004024 <memset>
		  memset(str, 0, sizeof(str));
 80006a4:	220a      	movs	r2, #10
 80006a6:	2100      	movs	r1, #0
 80006a8:	486f      	ldr	r0, [pc, #444]	; (8000868 <main+0x2e0>)
 80006aa:	f003 fcbb 	bl	8004024 <memset>
		  memset(slider_deger, 0, sizeof(slider_deger));
 80006ae:	2232      	movs	r2, #50	; 0x32
 80006b0:	2100      	movs	r1, #0
 80006b2:	4871      	ldr	r0, [pc, #452]	; (8000878 <main+0x2f0>)
 80006b4:	f003 fcb6 	bl	8004024 <memset>
		  memset(component_id, 0, sizeof(component_id));
 80006b8:	2232      	movs	r2, #50	; 0x32
 80006ba:	2100      	movs	r1, #0
 80006bc:	486d      	ldr	r0, [pc, #436]	; (8000874 <main+0x2ec>)
 80006be:	f003 fcb1 	bl	8004024 <memset>
 80006c2:	e79a      	b.n	80005fa <main+0x72>
	  }
	  else if(strcmp(component_id, "CD") == 0)
 80006c4:	4970      	ldr	r1, [pc, #448]	; (8000888 <main+0x300>)
 80006c6:	486b      	ldr	r0, [pc, #428]	; (8000874 <main+0x2ec>)
 80006c8:	f7ff fd82 	bl	80001d0 <strcmp>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d131      	bne.n	8000736 <main+0x1ae>
	  {
		  if(servo_2 % 2 == 0)
 80006d2:	4b6e      	ldr	r3, [pc, #440]	; (800088c <main+0x304>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d105      	bne.n	80006ec <main+0x164>
		  {
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 80006e0:	4b5b      	ldr	r3, [pc, #364]	; (8000850 <main+0x2c8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006e8:	639a      	str	r2, [r3, #56]	; 0x38
 80006ea:	e004      	b.n	80006f6 <main+0x16e>
		  }
		  else
		  {
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 2500);
 80006ec:	4b58      	ldr	r3, [pc, #352]	; (8000850 <main+0x2c8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80006f4:	639a      	str	r2, [r3, #56]	; 0x38
		  }
		  servo_2++;
 80006f6:	4b65      	ldr	r3, [pc, #404]	; (800088c <main+0x304>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b63      	ldr	r3, [pc, #396]	; (800088c <main+0x304>)
 8000700:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000706:	485f      	ldr	r0, [pc, #380]	; (8000884 <main+0x2fc>)
 8000708:	f001 fbc7 	bl	8001e9a <HAL_GPIO_TogglePin>
		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800070c:	2232      	movs	r2, #50	; 0x32
 800070e:	2100      	movs	r1, #0
 8000710:	4854      	ldr	r0, [pc, #336]	; (8000864 <main+0x2dc>)
 8000712:	f003 fc87 	bl	8004024 <memset>
		  memset(str, 0, sizeof(str));
 8000716:	220a      	movs	r2, #10
 8000718:	2100      	movs	r1, #0
 800071a:	4853      	ldr	r0, [pc, #332]	; (8000868 <main+0x2e0>)
 800071c:	f003 fc82 	bl	8004024 <memset>
		  memset(slider_deger, 0, sizeof(slider_deger));
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	2100      	movs	r1, #0
 8000724:	4854      	ldr	r0, [pc, #336]	; (8000878 <main+0x2f0>)
 8000726:	f003 fc7d 	bl	8004024 <memset>
		  memset(component_id, 0, sizeof(component_id));
 800072a:	2232      	movs	r2, #50	; 0x32
 800072c:	2100      	movs	r1, #0
 800072e:	4851      	ldr	r0, [pc, #324]	; (8000874 <main+0x2ec>)
 8000730:	f003 fc78 	bl	8004024 <memset>
 8000734:	e761      	b.n	80005fa <main+0x72>
	  }
	  else if(strcmp(component_id, "EF") == 0)
 8000736:	4956      	ldr	r1, [pc, #344]	; (8000890 <main+0x308>)
 8000738:	484e      	ldr	r0, [pc, #312]	; (8000874 <main+0x2ec>)
 800073a:	f7ff fd49 	bl	80001d0 <strcmp>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d118      	bne.n	8000776 <main+0x1ee>
	  	  {
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000744:	2110      	movs	r1, #16
 8000746:	4853      	ldr	r0, [pc, #332]	; (8000894 <main+0x30c>)
 8000748:	f001 fba7 	bl	8001e9a <HAL_GPIO_TogglePin>
	  		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800074c:	2232      	movs	r2, #50	; 0x32
 800074e:	2100      	movs	r1, #0
 8000750:	4844      	ldr	r0, [pc, #272]	; (8000864 <main+0x2dc>)
 8000752:	f003 fc67 	bl	8004024 <memset>
	  		  memset(str, 0, sizeof(str));
 8000756:	220a      	movs	r2, #10
 8000758:	2100      	movs	r1, #0
 800075a:	4843      	ldr	r0, [pc, #268]	; (8000868 <main+0x2e0>)
 800075c:	f003 fc62 	bl	8004024 <memset>
	  		  memset(slider_deger, 0, sizeof(slider_deger));
 8000760:	2232      	movs	r2, #50	; 0x32
 8000762:	2100      	movs	r1, #0
 8000764:	4844      	ldr	r0, [pc, #272]	; (8000878 <main+0x2f0>)
 8000766:	f003 fc5d 	bl	8004024 <memset>
	  		  memset(component_id, 0, sizeof(component_id));
 800076a:	2232      	movs	r2, #50	; 0x32
 800076c:	2100      	movs	r1, #0
 800076e:	4841      	ldr	r0, [pc, #260]	; (8000874 <main+0x2ec>)
 8000770:	f003 fc58 	bl	8004024 <memset>
 8000774:	e741      	b.n	80005fa <main+0x72>
	  	  }
	  else if(strcmp(component_id, "GH") == 0)
 8000776:	4948      	ldr	r1, [pc, #288]	; (8000898 <main+0x310>)
 8000778:	483e      	ldr	r0, [pc, #248]	; (8000874 <main+0x2ec>)
 800077a:	f7ff fd29 	bl	80001d0 <strcmp>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d118      	bne.n	80007b6 <main+0x22e>
	  	  {

	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000784:	2120      	movs	r1, #32
 8000786:	4843      	ldr	r0, [pc, #268]	; (8000894 <main+0x30c>)
 8000788:	f001 fb87 	bl	8001e9a <HAL_GPIO_TogglePin>
	  		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800078c:	2232      	movs	r2, #50	; 0x32
 800078e:	2100      	movs	r1, #0
 8000790:	4834      	ldr	r0, [pc, #208]	; (8000864 <main+0x2dc>)
 8000792:	f003 fc47 	bl	8004024 <memset>
	  		  memset(str, 0, sizeof(str));
 8000796:	220a      	movs	r2, #10
 8000798:	2100      	movs	r1, #0
 800079a:	4833      	ldr	r0, [pc, #204]	; (8000868 <main+0x2e0>)
 800079c:	f003 fc42 	bl	8004024 <memset>
	  		  memset(slider_deger, 0, sizeof(slider_deger));
 80007a0:	2232      	movs	r2, #50	; 0x32
 80007a2:	2100      	movs	r1, #0
 80007a4:	4834      	ldr	r0, [pc, #208]	; (8000878 <main+0x2f0>)
 80007a6:	f003 fc3d 	bl	8004024 <memset>
	  		  memset(component_id, 0, sizeof(component_id));
 80007aa:	2232      	movs	r2, #50	; 0x32
 80007ac:	2100      	movs	r1, #0
 80007ae:	4831      	ldr	r0, [pc, #196]	; (8000874 <main+0x2ec>)
 80007b0:	f003 fc38 	bl	8004024 <memset>
 80007b4:	e721      	b.n	80005fa <main+0x72>
	  	  }
	  else if(strcmp(component_id, "WX") == 0)
 80007b6:	4939      	ldr	r1, [pc, #228]	; (800089c <main+0x314>)
 80007b8:	482e      	ldr	r0, [pc, #184]	; (8000874 <main+0x2ec>)
 80007ba:	f7ff fd09 	bl	80001d0 <strcmp>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d173      	bne.n	80008ac <main+0x324>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	4835      	ldr	r0, [pc, #212]	; (80008a0 <main+0x318>)
 80007cc:	f001 fb4c 	bl	8001e68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	4832      	ldr	r0, [pc, #200]	; (80008a0 <main+0x318>)
 80007d8:	f001 fb46 	bl	8001e68 <HAL_GPIO_WritePin>
		  slider_value_1 = atoi(slider_deger);
 80007dc:	4826      	ldr	r0, [pc, #152]	; (8000878 <main+0x2f0>)
 80007de:	f003 fbe5 	bl	8003fac <atoi>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <main+0x31c>)
 80007e6:	6013      	str	r3, [r2, #0]


		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, slider_value_1);
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <main+0x31c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <main+0x2c4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	63da      	str	r2, [r3, #60]	; 0x3c
		 HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, sprintf((char*)tx_buffer,"t0.txt=\"%%%d\"",slider_value_1), 100);
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <main+0x31c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	492b      	ldr	r1, [pc, #172]	; (80008a8 <main+0x320>)
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <main+0x2d0>)
 80007fc:	f003 fc1a 	bl	8004034 <siprintf>
 8000800:	4603      	mov	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	4914      	ldr	r1, [pc, #80]	; (8000858 <main+0x2d0>)
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <main+0x2d4>)
 800080a:	f003 f888 	bl	800391e <HAL_UART_Transmit>
		 //Metin icerisinde % yazdirmak icin basina % koymalısın ie: %%
		 HAL_UART_Transmit(&huart2, cmdEnd, 3, 100);
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	2203      	movs	r2, #3
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <main+0x2d8>)
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <main+0x2d4>)
 8000816:	f003 f882 	bl	800391e <HAL_UART_Transmit>
		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	2100      	movs	r1, #0
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <main+0x2dc>)
 8000820:	f003 fc00 	bl	8004024 <memset>
		  memset(str, 0, sizeof(str));
 8000824:	220a      	movs	r2, #10
 8000826:	2100      	movs	r1, #0
 8000828:	480f      	ldr	r0, [pc, #60]	; (8000868 <main+0x2e0>)
 800082a:	f003 fbfb 	bl	8004024 <memset>
		  memset(slider_deger, 0, sizeof(slider_deger));
 800082e:	2232      	movs	r2, #50	; 0x32
 8000830:	2100      	movs	r1, #0
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <main+0x2f0>)
 8000834:	f003 fbf6 	bl	8004024 <memset>
		  memset(component_id, 0, sizeof(component_id));
 8000838:	2232      	movs	r2, #50	; 0x32
 800083a:	2100      	movs	r1, #0
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <main+0x2ec>)
 800083e:	f003 fbf1 	bl	8004024 <memset>
 8000842:	e6da      	b.n	80005fa <main+0x72>
 8000844:	20000214 	.word	0x20000214
 8000848:	20000260 	.word	0x20000260
 800084c:	200000bc 	.word	0x200000bc
 8000850:	20000130 	.word	0x20000130
 8000854:	0800553c 	.word	0x0800553c
 8000858:	200001ac 	.word	0x200001ac
 800085c:	200002a8 	.word	0x200002a8
 8000860:	20000000 	.word	0x20000000
 8000864:	20000178 	.word	0x20000178
 8000868:	200002ec 	.word	0x200002ec
 800086c:	08005558 	.word	0x08005558
 8000870:	2000032c 	.word	0x2000032c
 8000874:	200002f8 	.word	0x200002f8
 8000878:	200001e0 	.word	0x200001e0
 800087c:	0800555c 	.word	0x0800555c
 8000880:	20000098 	.word	0x20000098
 8000884:	40020c00 	.word	0x40020c00
 8000888:	08005560 	.word	0x08005560
 800088c:	2000025c 	.word	0x2000025c
 8000890:	08005564 	.word	0x08005564
 8000894:	40020400 	.word	0x40020400
 8000898:	08005568 	.word	0x08005568
 800089c:	0800556c 	.word	0x0800556c
 80008a0:	40020000 	.word	0x40020000
 80008a4:	20000090 	.word	0x20000090
 80008a8:	08005570 	.word	0x08005570


	  }
	  else if(strcmp(component_id, "YZ") == 0)
 80008ac:	4922      	ldr	r1, [pc, #136]	; (8000938 <main+0x3b0>)
 80008ae:	4823      	ldr	r0, [pc, #140]	; (800093c <main+0x3b4>)
 80008b0:	f7ff fc8e 	bl	80001d0 <strcmp>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	f47f ae9f 	bne.w	80005fa <main+0x72>
	  {

		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2120      	movs	r1, #32
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <main+0x3b8>)
 80008c2:	f001 fad1 	bl	8001e68 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	481d      	ldr	r0, [pc, #116]	; (8000940 <main+0x3b8>)
 80008cc:	f001 facc 	bl	8001e68 <HAL_GPIO_WritePin>
		  slider_value_2 = atoi(slider_deger);
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <main+0x3bc>)
 80008d2:	f003 fb6b 	bl	8003fac <atoi>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <main+0x3c0>)
 80008da:	6013      	str	r3, [r2, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, slider_value_2);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <main+0x3c0>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <main+0x3c4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	641a      	str	r2, [r3, #64]	; 0x40
		  HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, sprintf((char*)tx_buffer,"t1.txt=\"%%%d\"",slider_value_2), 100);
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <main+0x3c0>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4918      	ldr	r1, [pc, #96]	; (8000950 <main+0x3c8>)
 80008ee:	4819      	ldr	r0, [pc, #100]	; (8000954 <main+0x3cc>)
 80008f0:	f003 fba0 	bl	8004034 <siprintf>
 80008f4:	4603      	mov	r3, r0
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	4916      	ldr	r1, [pc, #88]	; (8000954 <main+0x3cc>)
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <main+0x3d0>)
 80008fe:	f003 f80e 	bl	800391e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, cmdEnd, 3, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	2203      	movs	r2, #3
 8000906:	4915      	ldr	r1, [pc, #84]	; (800095c <main+0x3d4>)
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <main+0x3d0>)
 800090a:	f003 f808 	bl	800391e <HAL_UART_Transmit>
		  memset(rx_buffer, 0, sizeof(rx_buffer));
 800090e:	2232      	movs	r2, #50	; 0x32
 8000910:	2100      	movs	r1, #0
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <main+0x3d8>)
 8000914:	f003 fb86 	bl	8004024 <memset>
		  memset(str, 0, sizeof(str));
 8000918:	220a      	movs	r2, #10
 800091a:	2100      	movs	r1, #0
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <main+0x3dc>)
 800091e:	f003 fb81 	bl	8004024 <memset>
		  memset(slider_deger, 0, sizeof(slider_deger));
 8000922:	2232      	movs	r2, #50	; 0x32
 8000924:	2100      	movs	r1, #0
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <main+0x3bc>)
 8000928:	f003 fb7c 	bl	8004024 <memset>
		  memset(component_id, 0, sizeof(component_id));
 800092c:	2232      	movs	r2, #50	; 0x32
 800092e:	2100      	movs	r1, #0
 8000930:	4802      	ldr	r0, [pc, #8]	; (800093c <main+0x3b4>)
 8000932:	f003 fb77 	bl	8004024 <memset>
	  HAL_UART_Receive(&huart2, rx_buffer, 50, 100);
 8000936:	e660      	b.n	80005fa <main+0x72>
 8000938:	08005580 	.word	0x08005580
 800093c:	200002f8 	.word	0x200002f8
 8000940:	40020c00 	.word	0x40020c00
 8000944:	200001e0 	.word	0x200001e0
 8000948:	20000094 	.word	0x20000094
 800094c:	200000bc 	.word	0x200000bc
 8000950:	08005584 	.word	0x08005584
 8000954:	200001ac 	.word	0x200001ac
 8000958:	200002a8 	.word	0x200002a8
 800095c:	20000000 	.word	0x20000000
 8000960:	20000178 	.word	0x20000178
 8000964:	200002ec 	.word	0x200002ec

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b094      	sub	sp, #80	; 0x50
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0320 	add.w	r3, r7, #32
 8000972:	2230      	movs	r2, #48	; 0x30
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fb54 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xcc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <SystemClock_Config+0xcc>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	2300      	movs	r3, #0
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <SystemClock_Config+0xd0>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	2301      	movs	r3, #1
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	2310      	movs	r3, #16
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d0:	2302      	movs	r3, #2
 80009d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009d8:	2308      	movs	r3, #8
 80009da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009dc:	23a8      	movs	r3, #168	; 0xa8
 80009de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009e4:	2304      	movs	r3, #4
 80009e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fa6f 	bl	8001ed0 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f8:	f000 fc7c 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	230f      	movs	r3, #15
 80009fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2302      	movs	r3, #2
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2105      	movs	r1, #5
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fcd0 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a26:	f000 fc65 	bl	80012f4 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3750      	adds	r7, #80	; 0x50
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	463b      	mov	r3, r7
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a62:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000a84:	f001 fe6c 	bl	8002760 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 fc31 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000aa0:	f002 fa64 	bl	8002f6c <HAL_TIM_ConfigClockSource>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aaa:	f000 fc23 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_TIM2_Init+0x98>)
 8000abc:	f002 fe52 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ac6:	f000 fc15 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000260 	.word	0x20000260

08000ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000afc:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <MX_TIM3_Init+0xc4>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b02:	2253      	movs	r2, #83	; 0x53
 8000b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b0e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000b12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b22:	f001 ff45 	bl	80029b0 <HAL_TIM_PWM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 fbe2 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b40:	f002 fe10 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b4a:	f000 fbd3 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4e:	2360      	movs	r3, #96	; 0x60
 8000b50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b66:	f002 f943 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b70:	f000 fbc0 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2204      	movs	r2, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b7c:	f002 f938 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b86:	f000 fbb5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b8a:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM3_Init+0xc0>)
 8000b8c:	f000 fc54 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000130 	.word	0x20000130
 8000b9c:	40000400 	.word	0x40000400

08000ba0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000bc4:	4a27      	ldr	r2, [pc, #156]	; (8000c64 <MX_TIM4_Init+0xc4>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000bca:	2253      	movs	r2, #83	; 0x53
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000bd6:	2263      	movs	r2, #99	; 0x63
 8000bd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000be6:	481e      	ldr	r0, [pc, #120]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000be8:	f001 fee2 	bl	80029b0 <HAL_TIM_PWM_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000bf2:	f000 fb7f 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	4619      	mov	r1, r3
 8000c04:	4816      	ldr	r0, [pc, #88]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000c06:	f002 fdad 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000c10:	f000 fb70 	bl	80012f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c14:	2360      	movs	r3, #96	; 0x60
 8000c16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2208      	movs	r2, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000c2c:	f002 f8e0 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c36:	f000 fb5d 	bl	80012f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	220c      	movs	r2, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000c42:	f002 f8d5 	bl	8002df0 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c4c:	f000 fb52 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <MX_TIM4_Init+0xc0>)
 8000c52:	f000 fbf1 	bl	8001438 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000bc 	.word	0x200000bc
 8000c64:	40000800 	.word	0x40000800

08000c68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c78:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_TIM6_Init+0x68>)
 8000c7a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c7e:	2253      	movs	r2, #83	; 0x53
 8000c80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65534;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000c98:	f001 fd62 	bl	8002760 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ca2:	f000 fb27 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_TIM6_Init+0x64>)
 8000cb4:	f002 fd56 	bl	8003764 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000cbe:	f000 fb19 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000214 	.word	0x20000214
 8000cd0:	40001000 	.word	0x40001000

08000cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_USART2_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f002 fdba 	bl	8003884 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 faed 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002a8 	.word	0x200002a8
 8000d24:	40004400 	.word	0x40004400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a3d      	ldr	r2, [pc, #244]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <MX_GPIO_Init+0x130>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	482a      	ldr	r0, [pc, #168]	; (8000e5c <MX_GPIO_Init+0x134>)
 8000db4:	f001 f858 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f243 0130 	movw	r1, #12336	; 0x3030
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <MX_GPIO_Init+0x138>)
 8000dc0:	f001 f852 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10|GPIO_PIN_13, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000dca:	4826      	ldr	r0, [pc, #152]	; (8000e64 <MX_GPIO_Init+0x13c>)
 8000dcc:	f001 f84c 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2130      	movs	r1, #48	; 0x30
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <MX_GPIO_Init+0x140>)
 8000dd6:	f001 f847 	bl	8001e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	481a      	ldr	r0, [pc, #104]	; (8000e5c <MX_GPIO_Init+0x134>)
 8000df2:	f000 fe85 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5;
 8000df6:	f243 0330 	movw	r3, #12336	; 0x3030
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_GPIO_Init+0x138>)
 8000e10:	f000 fe76 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13;
 8000e14:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_GPIO_Init+0x13c>)
 8000e2e:	f000 fe67 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e32:	2330      	movs	r3, #48	; 0x30
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_GPIO_Init+0x140>)
 8000e4a:	f000 fe59 	bl	8001b00 <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400

08000e6c <delay>:

/* USER CODE BEGIN 4 */

//DHT11 fonksiyon tanimlari
void delay(uint16_t time){
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <delay+0x30>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim6)< time);
 8000e7e:	bf00      	nop
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <delay+0x30>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3f9      	bcc.n	8000e80 <delay+0x14>

}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000214 	.word	0x20000214

08000ea0 <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]


	GPIO_InitTypeDef DHT11_DATA={0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 fe14 	bl	8001b00 <HAL_GPIO_Init>

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]


	GPIO_InitTypeDef DHT11_DATA={0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]

	DHT11_DATA.Pin=GPIO_Pin;
 8000efc:	887b      	ldrh	r3, [r7, #2]
 8000efe:	60fb      	str	r3, [r7, #12]
	DHT11_DATA.Mode=GPIO_MODE_INPUT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
	DHT11_DATA.Pull=GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
	DHT11_DATA.Speed=GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOx,&DHT11_DATA);
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 fdf4 	bl	8001b00 <HAL_GPIO_Init>

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <DHT11_Read>:

uint8_t DHT11_Read (uint16_t *sicaklik, uint16_t *nem){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]

  for(int a=0;a<40;a++) mData[a]=0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e007      	b.n	8000f40 <DHT11_Read+0x20>
 8000f30:	4a8f      	ldr	r2, [pc, #572]	; (8001170 <DHT11_Read+0x250>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4413      	add	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b27      	cmp	r3, #39	; 0x27
 8000f44:	ddf4      	ble.n	8000f30 <DHT11_Read+0x10>
   mTime1 = 0, mTime2 = 0, durum=0, tempVal=0, humVal=0, parityVal = 0, genParity = 0,  mbit = 0;
 8000f46:	4b8b      	ldr	r3, [pc, #556]	; (8001174 <DHT11_Read+0x254>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	801a      	strh	r2, [r3, #0]
 8000f4c:	4b8a      	ldr	r3, [pc, #552]	; (8001178 <DHT11_Read+0x258>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	4b8a      	ldr	r3, [pc, #552]	; (800117c <DHT11_Read+0x25c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	4b89      	ldr	r3, [pc, #548]	; (8001180 <DHT11_Read+0x260>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	801a      	strh	r2, [r3, #0]
 8000f5e:	4b89      	ldr	r3, [pc, #548]	; (8001184 <DHT11_Read+0x264>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	801a      	strh	r2, [r3, #0]
 8000f64:	4b88      	ldr	r3, [pc, #544]	; (8001188 <DHT11_Read+0x268>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	4b88      	ldr	r3, [pc, #544]	; (800118c <DHT11_Read+0x26c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	4b87      	ldr	r3, [pc, #540]	; (8001190 <DHT11_Read+0x270>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]

     Set_Pin_Output(DHT11_PORT,DHT11_PIN);
 8000f76:	2102      	movs	r1, #2
 8000f78:	4886      	ldr	r0, [pc, #536]	; (8001194 <DHT11_Read+0x274>)
 8000f7a:	f7ff ff91 	bl	8000ea0 <Set_Pin_Output>
	 HAL_GPIO_WritePin(DHT11_PORT,DHT11_PIN,GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2102      	movs	r1, #2
 8000f82:	4884      	ldr	r0, [pc, #528]	; (8001194 <DHT11_Read+0x274>)
 8000f84:	f000 ff70 	bl	8001e68 <HAL_GPIO_WritePin>
    delay(18000);
 8000f88:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f8c:	f7ff ff6e 	bl	8000e6c <delay>
   	Set_Pin_Input(DHT11_PORT,DHT11_PIN);
 8000f90:	2102      	movs	r1, #2
 8000f92:	4880      	ldr	r0, [pc, #512]	; (8001194 <DHT11_Read+0x274>)
 8000f94:	f7ff ffa4 	bl	8000ee0 <Set_Pin_Input>

	 __HAL_TIM_SET_COUNTER(&htim6, 0);				//set timer counter to zero
 8000f98:	4b7f      	ldr	r3, [pc, #508]	; (8001198 <DHT11_Read+0x278>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000fa0:	e008      	b.n	8000fb4 <DHT11_Read+0x94>
 8000fa2:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <DHT11_Read+0x278>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fae:	d901      	bls.n	8000fb4 <DHT11_Read+0x94>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e138      	b.n	8001226 <DHT11_Read+0x306>
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4877      	ldr	r0, [pc, #476]	; (8001194 <DHT11_Read+0x274>)
 8000fb8:	f000 ff3e 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d0ef      	beq.n	8000fa2 <DHT11_Read+0x82>

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000fc2:	4b75      	ldr	r3, [pc, #468]	; (8001198 <DHT11_Read+0x278>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8000fca:	e008      	b.n	8000fde <DHT11_Read+0xbe>
 8000fcc:	4b72      	ldr	r3, [pc, #456]	; (8001198 <DHT11_Read+0x278>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd8:	d901      	bls.n	8000fde <DHT11_Read+0xbe>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e123      	b.n	8001226 <DHT11_Read+0x306>
 8000fde:	2102      	movs	r1, #2
 8000fe0:	486c      	ldr	r0, [pc, #432]	; (8001194 <DHT11_Read+0x274>)
 8000fe2:	f000 ff29 	bl	8001e38 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0ef      	beq.n	8000fcc <DHT11_Read+0xac>
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8000fec:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <DHT11_Read+0x278>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <DHT11_Read+0x254>)
 8000ff6:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000ff8:	4b67      	ldr	r3, [pc, #412]	; (8001198 <DHT11_Read+0x278>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001000:	e008      	b.n	8001014 <DHT11_Read+0xf4>
 8001002:	4b65      	ldr	r3, [pc, #404]	; (8001198 <DHT11_Read+0x278>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	b29b      	uxth	r3, r3
 800100a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800100e:	d901      	bls.n	8001014 <DHT11_Read+0xf4>
 8001010:	2300      	movs	r3, #0
 8001012:	e108      	b.n	8001226 <DHT11_Read+0x306>
 8001014:	2102      	movs	r1, #2
 8001016:	485f      	ldr	r0, [pc, #380]	; (8001194 <DHT11_Read+0x274>)
 8001018:	f000 ff0e 	bl	8001e38 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d0ef      	beq.n	8001002 <DHT11_Read+0xe2>
    mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 8001022:	4b5d      	ldr	r3, [pc, #372]	; (8001198 <DHT11_Read+0x278>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <DHT11_Read+0x258>)
 800102c:	801a      	strh	r2, [r3, #0]


	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 800102e:	4b51      	ldr	r3, [pc, #324]	; (8001174 <DHT11_Read+0x254>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	2b4a      	cmp	r3, #74	; 0x4a
 8001034:	d80d      	bhi.n	8001052 <DHT11_Read+0x132>
 8001036:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <DHT11_Read+0x254>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	2b55      	cmp	r3, #85	; 0x55
 800103c:	d909      	bls.n	8001052 <DHT11_Read+0x132>
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <DHT11_Read+0x258>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	2b4a      	cmp	r3, #74	; 0x4a
 8001044:	d805      	bhi.n	8001052 <DHT11_Read+0x132>
 8001046:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <DHT11_Read+0x258>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	2b55      	cmp	r3, #85	; 0x55
 800104c:	d901      	bls.n	8001052 <DHT11_Read+0x132>
	{

		return 0;
 800104e:	2300      	movs	r3, #0
 8001050:	e0e9      	b.n	8001226 <DHT11_Read+0x306>
	}




	for(int j = 0; j < 40; j++)
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	e051      	b.n	80010fc <DHT11_Read+0x1dc>
	{
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <DHT11_Read+0x278>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 8001060:	e008      	b.n	8001074 <DHT11_Read+0x154>
 8001062:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <DHT11_Read+0x278>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	b29b      	uxth	r3, r3
 800106a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800106e:	d901      	bls.n	8001074 <DHT11_Read+0x154>
 8001070:	2300      	movs	r3, #0
 8001072:	e0d8      	b.n	8001226 <DHT11_Read+0x306>
 8001074:	2102      	movs	r1, #2
 8001076:	4847      	ldr	r0, [pc, #284]	; (8001194 <DHT11_Read+0x274>)
 8001078:	f000 fede 	bl	8001e38 <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0ef      	beq.n	8001062 <DHT11_Read+0x142>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <DHT11_Read+0x278>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) if((uint16_t)__HAL_TIM_GET_COUNTER(&htim6) > 500) return 0;
 800108a:	e008      	b.n	800109e <DHT11_Read+0x17e>
 800108c:	4b42      	ldr	r3, [pc, #264]	; (8001198 <DHT11_Read+0x278>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	b29b      	uxth	r3, r3
 8001094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001098:	d901      	bls.n	800109e <DHT11_Read+0x17e>
 800109a:	2300      	movs	r3, #0
 800109c:	e0c3      	b.n	8001226 <DHT11_Read+0x306>
 800109e:	2102      	movs	r1, #2
 80010a0:	483c      	ldr	r0, [pc, #240]	; (8001194 <DHT11_Read+0x274>)
 80010a2:	f000 fec9 	bl	8001e38 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d0ef      	beq.n	800108c <DHT11_Read+0x16c>
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim6);
 80010ac:	4b3a      	ldr	r3, [pc, #232]	; (8001198 <DHT11_Read+0x278>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <DHT11_Read+0x254>)
 80010b6:	801a      	strh	r2, [r3, #0]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <DHT11_Read+0x254>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b14      	cmp	r3, #20
 80010be:	d907      	bls.n	80010d0 <DHT11_Read+0x1b0>
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <DHT11_Read+0x254>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b1d      	cmp	r3, #29
 80010c6:	d803      	bhi.n	80010d0 <DHT11_Read+0x1b0>
		{
			mbit = 0;
 80010c8:	4b31      	ldr	r3, [pc, #196]	; (8001190 <DHT11_Read+0x270>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	801a      	strh	r2, [r3, #0]
 80010ce:	e00a      	b.n	80010e6 <DHT11_Read+0x1c6>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <DHT11_Read+0x254>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	2b3c      	cmp	r3, #60	; 0x3c
 80010d6:	d906      	bls.n	80010e6 <DHT11_Read+0x1c6>
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <DHT11_Read+0x254>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b4f      	cmp	r3, #79	; 0x4f
 80010de:	d802      	bhi.n	80010e6 <DHT11_Read+0x1c6>
		{
			 mbit = 1;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <DHT11_Read+0x270>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	801a      	strh	r2, [r3, #0]
		}

		//set i th data in data buffer
		mData[j] = mbit;
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <DHT11_Read+0x270>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	b2d9      	uxtb	r1, r3
 80010ec:	4a20      	ldr	r2, [pc, #128]	; (8001170 <DHT11_Read+0x250>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4413      	add	r3, r2
 80010f2:	460a      	mov	r2, r1
 80010f4:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b27      	cmp	r3, #39	; 0x27
 8001100:	ddaa      	ble.n	8001058 <DHT11_Read+0x138>

	}

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e013      	b.n	8001130 <DHT11_Read+0x210>
	{
		humVal += mData[i];
 8001108:	4a19      	ldr	r2, [pc, #100]	; (8001170 <DHT11_Read+0x250>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <DHT11_Read+0x264>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <DHT11_Read+0x264>)
 800111c:	801a      	strh	r2, [r3, #0]
		humVal = humVal << 1;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <DHT11_Read+0x264>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <DHT11_Read+0x264>)
 8001128:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b07      	cmp	r3, #7
 8001134:	dde8      	ble.n	8001108 <DHT11_Read+0x1e8>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8001136:	2310      	movs	r3, #16
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	e013      	b.n	8001164 <DHT11_Read+0x244>
	{
		tempVal += mData[i];
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <DHT11_Read+0x250>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <DHT11_Read+0x260>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <DHT11_Read+0x260>)
 8001150:	801a      	strh	r2, [r3, #0]
		tempVal = tempVal << 1;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <DHT11_Read+0x260>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <DHT11_Read+0x260>)
 800115c:	801a      	strh	r2, [r3, #0]
	for(int i = 16; i < 24; i++)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b17      	cmp	r3, #23
 8001168:	dde8      	ble.n	800113c <DHT11_Read+0x21c>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 800116a:	2320      	movs	r3, #32
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	e028      	b.n	80011c2 <DHT11_Read+0x2a2>
 8001170:	20000108 	.word	0x20000108
 8001174:	200000a4 	.word	0x200000a4
 8001178:	200000a6 	.word	0x200000a6
 800117c:	2000009a 	.word	0x2000009a
 8001180:	200000a0 	.word	0x200000a0
 8001184:	200000a2 	.word	0x200000a2
 8001188:	200000aa 	.word	0x200000aa
 800118c:	200000ab 	.word	0x200000ab
 8001190:	200000a8 	.word	0x200000a8
 8001194:	40020800 	.word	0x40020800
 8001198:	20000214 	.word	0x20000214
	{
		parityVal += mData[i];
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <DHT11_Read+0x310>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <DHT11_Read+0x314>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <DHT11_Read+0x314>)
 80011ae:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <DHT11_Read+0x314>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <DHT11_Read+0x314>)
 80011ba:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 40; i++)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b27      	cmp	r3, #39	; 0x27
 80011c6:	dde9      	ble.n	800119c <DHT11_Read+0x27c>
	}

	parityVal = parityVal >> 1;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <DHT11_Read+0x314>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <DHT11_Read+0x314>)
 80011d2:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <DHT11_Read+0x318>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	085b      	lsrs	r3, r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <DHT11_Read+0x318>)
 80011de:	801a      	strh	r2, [r3, #0]
	tempVal = tempVal >> 1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <DHT11_Read+0x31c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <DHT11_Read+0x31c>)
 80011ea:	801a      	strh	r2, [r3, #0]

	genParity = humVal + tempVal;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <DHT11_Read+0x318>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <DHT11_Read+0x31c>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <DHT11_Read+0x320>)
 80011fe:	701a      	strb	r2, [r3, #0]


	dhtVal[0]= tempVal;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <DHT11_Read+0x31c>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <DHT11_Read+0x324>)
 8001208:	701a      	strb	r2, [r3, #0]
	dhtVal[1] = humVal;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <DHT11_Read+0x318>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <DHT11_Read+0x324>)
 8001212:	705a      	strb	r2, [r3, #1]

	 *sicaklik=tempVal;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <DHT11_Read+0x31c>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	801a      	strh	r2, [r3, #0]
	 *nem=humVal;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <DHT11_Read+0x318>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	801a      	strh	r2, [r3, #0]




	return 1;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000108 	.word	0x20000108
 8001234:	200000aa 	.word	0x200000aa
 8001238:	200000a2 	.word	0x200000a2
 800123c:	200000a0 	.word	0x200000a0
 8001240:	200000ab 	.word	0x200000ab
 8001244:	20000104 	.word	0x20000104

08001248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	  durum = DHT11_Read(&Temperature, &Humidity);
 8001250:	491f      	ldr	r1, [pc, #124]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001252:	4820      	ldr	r0, [pc, #128]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001254:	f7ff fe64 	bl	8000f20 <DHT11_Read>
 8001258:	4603      	mov	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800125e:	801a      	strh	r2, [r3, #0]
		  if(durum == 1)
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d103      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x28>
		  {
			  if_sarti = 1;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800126a:	2201      	movs	r2, #1
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	e002      	b.n	8001276 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  }
		  else
		  {
			  if_sarti = 0;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	801a      	strh	r2, [r3, #0]
		  }
		  HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, sprintf((char*)tx_buffer,"page2.t2.txt=\"%d C\"",Temperature), 100);
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4918      	ldr	r1, [pc, #96]	; (80012e0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800127e:	4819      	ldr	r0, [pc, #100]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001280:	f002 fed8 	bl	8004034 <siprintf>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	2364      	movs	r3, #100	; 0x64
 800128a:	4916      	ldr	r1, [pc, #88]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800128e:	f002 fb46 	bl	800391e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, cmdEnd, 3, 100);
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	2203      	movs	r2, #3
 8001296:	4915      	ldr	r1, [pc, #84]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800129a:	f002 fb40 	bl	800391e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2,(uint8_t*)tx_buffer, sprintf((char*)tx_buffer,"page2.t3.txt=\"%%%d\"",Humidity), 100);
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012a8:	f002 fec4 	bl	8004034 <siprintf>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	490c      	ldr	r1, [pc, #48]	; (80012e4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012b6:	f002 fb32 	bl	800391e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, cmdEnd, 3, 100);
 80012ba:	2364      	movs	r3, #100	; 0x64
 80012bc:	2203      	movs	r2, #3
 80012be:	490b      	ldr	r1, [pc, #44]	; (80012ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012c2:	f002 fb2c 	bl	800391e <HAL_UART_Transmit>

}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000009c 	.word	0x2000009c
 80012d4:	2000009e 	.word	0x2000009e
 80012d8:	2000009a 	.word	0x2000009a
 80012dc:	200000ac 	.word	0x200000ac
 80012e0:	08005594 	.word	0x08005594
 80012e4:	200001ac 	.word	0x200001ac
 80012e8:	200002a8 	.word	0x200002a8
 80012ec:	20000000 	.word	0x20000000
 80012f0:	080055a8 	.word	0x080055a8

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001360:	d116      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	201c      	movs	r0, #28
 8001384:	f000 fb85 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001388:	201c      	movs	r0, #28
 800138a:	f000 fb9e 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800138e:	e012      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_TIM_Base_MspInit+0x74>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10d      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_TIM_Base_MspInit+0x70>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40001000 	.word	0x40001000

080013c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_TIM_PWM_MspInit+0x64>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d10e      	bne.n	80013f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013f6:	e012      	b.n	800141e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_TIM_PWM_MspInit+0x6c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10d      	bne.n	800141e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_TIM_PWM_MspInit+0x68>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40000400 	.word	0x40000400
 8001430:	40023800 	.word	0x40023800
 8001434:	40000800 	.word	0x40000800

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <HAL_TIM_MspPostInit+0xb0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001476:	23c0      	movs	r3, #192	; 0xc0
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001486:	2302      	movs	r3, #2
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <HAL_TIM_MspPostInit+0xb8>)
 8001492:	f000 fb35 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001496:	e023      	b.n	80014e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_TIM_MspPostInit+0xbc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d11e      	bne.n	80014e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_TIM_MspPostInit+0xb4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014d0:	2302      	movs	r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <HAL_TIM_MspPostInit+0xc0>)
 80014dc:	f000 fb10 	bl	8001b00 <HAL_GPIO_Init>
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40000800 	.word	0x40000800
 80014f8:	40020c00 	.word	0x40020c00

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_UART_MspInit+0x84>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12b      	bne.n	8001576 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_UART_MspInit+0x88>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_UART_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001566:	2307      	movs	r3, #7
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_UART_MspInit+0x8c>)
 8001572:	f000 fac5 	bl	8001b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004400 	.word	0x40004400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler+0x4>

08001592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler+0x4>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <MemManage_Handler+0x4>

0800159e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <BusFault_Handler+0x4>

080015a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <UsageFault_Handler+0x4>

080015aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d8:	f000 f960 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}

080015e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM2_IRQHandler+0x10>)
 80015e6:	f001 fafb 	bl	8002be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000260 	.word	0x20000260

080015f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_kill>:

int _kill(int pid, int sig)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800160e:	f002 fcd1 	bl	8003fb4 <__errno>
 8001612:	4603      	mov	r3, r0
 8001614:	2216      	movs	r2, #22
 8001616:	601a      	str	r2, [r3, #0]
	return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_exit>:

void _exit (int status)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffe7 	bl	8001604 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0x12>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
	}

return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf1      	blt.n	8001684 <_write+0x12>
	}
	return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_close>:

int _close(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	605a      	str	r2, [r3, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_isatty>:

int _isatty(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f002 fc36 	bl	8003fb4 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20020000 	.word	0x20020000
 8001774:	00000400 	.word	0x00000400
 8001778:	200000b0 	.word	0x200000b0
 800177c:	20000348 	.word	0x20000348

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f002 fbf5 	bl	8003fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7fe fed7 	bl	8000588 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017e8:	08005830 	.word	0x08005830
  ldr r2, =_sbss
 80017ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80017f0:	20000344 	.word	0x20000344

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f92b 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	2000      	movs	r0, #0
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fd68 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f943 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f90b 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000004 	.word	0x20000004
 8001894:	2000000c 	.word	0x2000000c
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	20000330 	.word	0x20000330

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000330 	.word	0x20000330

080018dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f8:	4013      	ands	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x44>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <__NVIC_GetPriorityGrouping+0x18>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0307 	and.w	r3, r3, #7
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	db0b      	blt.n	800196a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <__NVIC_EnableIRQ+0x38>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	2001      	movs	r0, #1
 8001962:	fa00 f202 	lsl.w	r2, r0, r2
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000e100 	.word	0xe000e100

0800197c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db0a      	blt.n	80019a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	490c      	ldr	r1, [pc, #48]	; (80019c8 <__NVIC_SetPriority+0x4c>)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	0112      	lsls	r2, r2, #4
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	440b      	add	r3, r1
 80019a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a4:	e00a      	b.n	80019bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4908      	ldr	r1, [pc, #32]	; (80019cc <__NVIC_SetPriority+0x50>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	3b04      	subs	r3, #4
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	440b      	add	r3, r1
 80019ba:	761a      	strb	r2, [r3, #24]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000e100 	.word	0xe000e100
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b089      	sub	sp, #36	; 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f1c3 0307 	rsb	r3, r3, #7
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	bf28      	it	cs
 80019ee:	2304      	movcs	r3, #4
 80019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3304      	adds	r3, #4
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	d902      	bls.n	8001a00 <NVIC_EncodePriority+0x30>
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3b03      	subs	r3, #3
 80019fe:	e000      	b.n	8001a02 <NVIC_EncodePriority+0x32>
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	f04f 32ff 	mov.w	r2, #4294967295
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	401a      	ands	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a22:	43d9      	mvns	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	4313      	orrs	r3, r2
         );
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3724      	adds	r7, #36	; 0x24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff8e 	bl	800197c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff29 	bl	80018dc <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff3e 	bl	8001924 <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff8e 	bl	80019d0 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5d 	bl	800197c <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff31 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e16b      	b.n	8001df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	f040 815a 	bne.w	8001dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d005      	beq.n	8001b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d130      	bne.n	8001bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b88:	2201      	movs	r2, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 0201 	and.w	r2, r3, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d017      	beq.n	8001bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d123      	bne.n	8001c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	08da      	lsrs	r2, r3, #3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3208      	adds	r2, #8
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0203 	and.w	r2, r3, #3
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80b4 	beq.w	8001dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b60      	ldr	r3, [pc, #384]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a5f      	ldr	r2, [pc, #380]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <HAL_GPIO_Init+0x30c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca2:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <HAL_GPIO_Init+0x310>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_GPIO_Init+0x314>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d02b      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a51      	ldr	r2, [pc, #324]	; (8001e18 <HAL_GPIO_Init+0x318>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x222>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <HAL_GPIO_Init+0x31c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x21e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_GPIO_Init+0x320>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4e      	ldr	r2, [pc, #312]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x216>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4d      	ldr	r2, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x328>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x212>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x32c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x20e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x20a>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00e      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	e00c      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00a      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x228>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_GPIO_Init+0x310>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6a:	4a32      	ldr	r2, [pc, #200]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d94:	4a27      	ldr	r2, [pc, #156]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f ae90 	bls.w	8001b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40021400 	.word	0x40021400
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40021c00 	.word	0x40021c00
 8001e34:	40013c00 	.word	0x40013c00

08001e38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e001      	b.n	8001e5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
 8001e74:	4613      	mov	r3, r2
 8001e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e78:	787b      	ldrb	r3, [r7, #1]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	619a      	str	r2, [r3, #24]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	041a      	lsls	r2, r3, #16
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43d9      	mvns	r1, r3
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e264      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4ba0      	ldr	r3, [pc, #640]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b9d      	ldr	r3, [pc, #628]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e23f      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a83      	ldr	r2, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a80      	ldr	r2, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fc9c 	bl	80018c4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fc98 	bl	80018c4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e204      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fc88 	bl	80018c4 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fc84 	bl	80018c4 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1f0      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1c4      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4952      	ldr	r1, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fc3d 	bl	80018c4 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff fc39 	bl	80018c4 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a5      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4940      	ldr	r1, [pc, #256]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fc1c 	bl	80018c4 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fc18 	bl	80018c4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e184      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d030      	beq.n	800211c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fbfc 	bl	80018c4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fbf8 	bl	80018c4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e164      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e015      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fbe5 	bl	80018c4 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff fbe1 	bl	80018c4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e14d      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7ff fba7 	bl	80018c4 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e011      	b.n	800219e <HAL_RCC_OscConfig+0x2ce>
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
 8002188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7ff fb9a 	bl	80018c4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e106      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <HAL_RCC_OscConfig+0x4e4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
 80021b2:	4b81      	ldr	r3, [pc, #516]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a80      	ldr	r2, [pc, #512]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	e01c      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a7a      	ldr	r2, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a77      	ldr	r2, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021e2:	4b75      	ldr	r3, [pc, #468]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a71      	ldr	r2, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fb5f 	bl	80018c4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fb5b 	bl	80018c4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0c5      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ee      	beq.n	800220a <HAL_RCC_OscConfig+0x33a>
 800222c:	e014      	b.n	8002258 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb49 	bl	80018c4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fb45 	bl	80018c4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0af      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	4b5a      	ldr	r3, [pc, #360]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b56      	ldr	r3, [pc, #344]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 809b 	beq.w	80023aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d05c      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d141      	bne.n	800230c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fb19 	bl	80018c4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb15 	bl	80018c4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e081      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	3b01      	subs	r3, #1
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff faee 	bl	80018c4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff faea 	bl	80018c4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e056      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x41c>
 800230a:	e04e      	b.n	80023aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fad7 	bl	80018c4 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fad3 	bl	80018c4 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03f      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x44a>
 8002338:	e037      	b.n	80023aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e032      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCC_OscConfig+0x4e8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d028      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d11a      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800237c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800237e:	4293      	cmp	r3, r2
 8002380:	d111      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	085b      	lsrs	r3, r3, #1
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40007000 	.word	0x40007000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470060 	.word	0x42470060

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7ff fa08 	bl	80018c4 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7ff fa04 	bl	80018c4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	; (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f968 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	080055bc 	.word	0x080055bc
 8002584:	20000004 	.word	0x20000004
 8002588:	20000008 	.word	0x20000008

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002592:	2100      	movs	r1, #0
 8002594:	6079      	str	r1, [r7, #4]
 8002596:	2100      	movs	r1, #0
 8002598:	60f9      	str	r1, [r7, #12]
 800259a:	2100      	movs	r1, #0
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800259e:	2100      	movs	r1, #0
 80025a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a2:	4952      	ldr	r1, [pc, #328]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025a4:	6889      	ldr	r1, [r1, #8]
 80025a6:	f001 010c 	and.w	r1, r1, #12
 80025aa:	2908      	cmp	r1, #8
 80025ac:	d00d      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x3e>
 80025ae:	2908      	cmp	r1, #8
 80025b0:	f200 8094 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x150>
 80025b4:	2900      	cmp	r1, #0
 80025b6:	d002      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x32>
 80025b8:	2904      	cmp	r1, #4
 80025ba:	d003      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0x38>
 80025bc:	e08e      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80025c0:	60bb      	str	r3, [r7, #8]
       break;
 80025c2:	e08e      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4b4b      	ldr	r3, [pc, #300]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025c6:	60bb      	str	r3, [r7, #8]
      break;
 80025c8:	e08b      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ca:	4948      	ldr	r1, [pc, #288]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025cc:	6849      	ldr	r1, [r1, #4]
 80025ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80025d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d4:	4945      	ldr	r1, [pc, #276]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025d6:	6849      	ldr	r1, [r1, #4]
 80025d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80025dc:	2900      	cmp	r1, #0
 80025de:	d024      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e0:	4942      	ldr	r1, [pc, #264]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80025e2:	6849      	ldr	r1, [r1, #4]
 80025e4:	0989      	lsrs	r1, r1, #6
 80025e6:	4608      	mov	r0, r1
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80025f0:	f04f 0500 	mov.w	r5, #0
 80025f4:	ea00 0204 	and.w	r2, r0, r4
 80025f8:	ea01 0305 	and.w	r3, r1, r5
 80025fc:	493d      	ldr	r1, [pc, #244]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025fe:	fb01 f003 	mul.w	r0, r1, r3
 8002602:	2100      	movs	r1, #0
 8002604:	fb01 f102 	mul.w	r1, r1, r2
 8002608:	1844      	adds	r4, r0, r1
 800260a:	493a      	ldr	r1, [pc, #232]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800260c:	fba2 0101 	umull	r0, r1, r2, r1
 8002610:	1863      	adds	r3, r4, r1
 8002612:	4619      	mov	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	461a      	mov	r2, r3
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	f7fd fe38 	bl	8000290 <__aeabi_uldivmod>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4613      	mov	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e04a      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	461a      	mov	r2, r3
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800263a:	f04f 0100 	mov.w	r1, #0
 800263e:	ea02 0400 	and.w	r4, r2, r0
 8002642:	ea03 0501 	and.w	r5, r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	014b      	lsls	r3, r1, #5
 8002654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002658:	0142      	lsls	r2, r0, #5
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	1b00      	subs	r0, r0, r4
 8002660:	eb61 0105 	sbc.w	r1, r1, r5
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	018b      	lsls	r3, r1, #6
 800266e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002672:	0182      	lsls	r2, r0, #6
 8002674:	1a12      	subs	r2, r2, r0
 8002676:	eb63 0301 	sbc.w	r3, r3, r1
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f04f 0100 	mov.w	r1, #0
 8002682:	00d9      	lsls	r1, r3, #3
 8002684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002688:	00d0      	lsls	r0, r2, #3
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	1912      	adds	r2, r2, r4
 8002690:	eb45 0303 	adc.w	r3, r5, r3
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0299      	lsls	r1, r3, #10
 800269e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026a2:	0290      	lsls	r0, r2, #10
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f7fd fdec 	bl	8000290 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_GetSysClockFreq+0x160>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	60bb      	str	r3, [r7, #8]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80026de:	60bb      	str	r3, [r7, #8]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	68bb      	ldr	r3, [r7, #8]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	017d7840 	.word	0x017d7840

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	080055cc 	.word	0x080055cc

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	080055cc 	.word	0x080055cc

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fde2 	bl	8001350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 fcd0 	bl	8003144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e046      	b.n	80028a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a23      	ldr	r2, [pc, #140]	; (80028b4 <HAL_TIM_Base_Start+0xb4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d022      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d01d      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_TIM_Base_Start+0xb8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d018      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_TIM_Base_Start+0xbc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <HAL_TIM_Base_Start+0xc0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1b      	ldr	r2, [pc, #108]	; (80028c4 <HAL_TIM_Base_Start+0xc4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <HAL_TIM_Base_Start+0xc8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start+0x70>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_TIM_Base_Start+0xcc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800
 80028c0:	40000c00 	.word	0x40000c00
 80028c4:	40010400 	.word	0x40010400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40001800 	.word	0x40001800

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04e      	b.n	8002986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_TIM_Base_Start_IT+0xc4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d01d      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_TIM_Base_Start_IT+0xc8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_TIM_Base_Start_IT+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_TIM_Base_Start_IT+0xdc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40001800 	.word	0x40001800

080029b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe fcf6 	bl	80013c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fba8 	bl	8003144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_TIM_PWM_Start+0x24>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	bf14      	ite	ne
 8002a6c:	2301      	movne	r3, #1
 8002a6e:	2300      	moveq	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	e022      	b.n	8002aba <HAL_TIM_PWM_Start+0x6a>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d109      	bne.n	8002a8e <HAL_TIM_PWM_Start+0x3e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	bf14      	ite	ne
 8002a86:	2301      	movne	r3, #1
 8002a88:	2300      	moveq	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	e015      	b.n	8002aba <HAL_TIM_PWM_Start+0x6a>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d109      	bne.n	8002aa8 <HAL_TIM_PWM_Start+0x58>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e008      	b.n	8002aba <HAL_TIM_PWM_Start+0x6a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e07c      	b.n	8002bbc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d104      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0x82>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ad0:	e013      	b.n	8002afa <HAL_TIM_PWM_Start+0xaa>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_PWM_Start+0x92>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ae0:	e00b      	b.n	8002afa <HAL_TIM_PWM_Start+0xaa>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_PWM_Start+0xa2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002af0:	e003      	b.n	8002afa <HAL_TIM_PWM_Start+0xaa>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fe08 	bl	8003718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2d      	ldr	r2, [pc, #180]	; (8002bc4 <HAL_TIM_PWM_Start+0x174>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_TIM_PWM_Start+0xcc>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2c      	ldr	r2, [pc, #176]	; (8002bc8 <HAL_TIM_PWM_Start+0x178>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIM_PWM_Start+0xd0>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_TIM_PWM_Start+0xd2>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_TIM_PWM_Start+0x174>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d022      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d01d      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_TIM_PWM_Start+0x17c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_TIM_PWM_Start+0x180>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_TIM_PWM_Start+0x184>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_TIM_PWM_Start+0x178>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_TIM_PWM_Start+0x188>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x136>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_TIM_PWM_Start+0x18c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d010      	beq.n	8002bba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	e007      	b.n	8002bba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40010400 	.word	0x40010400
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800
 8002bd4:	40000c00 	.word	0x40000c00
 8002bd8:	40014000 	.word	0x40014000
 8002bdc:	40001800 	.word	0x40001800

08002be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0202 	mvn.w	r2, #2
 8002c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fa70 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa62 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fa73 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0204 	mvn.w	r2, #4
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa46 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fa38 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fa49 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0208 	mvn.w	r2, #8
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa1c 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa0e 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa1f 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0210 	mvn.w	r2, #16
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9f2 	bl	8003108 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9e4 	bl	80030f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f9f5 	bl	800311c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10e      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0201 	mvn.w	r2, #1
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fa72 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fd70 	bl	8003870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9ba 	bl	8003130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fd3a 	bl	800385c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0ac      	b.n	8002f64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	f200 809f 	bhi.w	8002f58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002f59 	.word	0x08002f59
 8002e28:	08002f59 	.word	0x08002f59
 8002e2c:	08002f59 	.word	0x08002f59
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	08002f59 	.word	0x08002f59
 8002e38:	08002f59 	.word	0x08002f59
 8002e3c:	08002f59 	.word	0x08002f59
 8002e40:	08002ed7 	.word	0x08002ed7
 8002e44:	08002f59 	.word	0x08002f59
 8002e48:	08002f59 	.word	0x08002f59
 8002e4c:	08002f59 	.word	0x08002f59
 8002e50:	08002f17 	.word	0x08002f17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fa12 	bl	8003284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0208 	orr.w	r2, r2, #8
 8002e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0204 	bic.w	r2, r2, #4
 8002e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6999      	ldr	r1, [r3, #24]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
      break;
 8002e92:	e062      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa62 	bl	8003364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	021a      	lsls	r2, r3, #8
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	619a      	str	r2, [r3, #24]
      break;
 8002ed4:	e041      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fab7 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0208 	orr.w	r2, r2, #8
 8002ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0204 	bic.w	r2, r2, #4
 8002f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69d9      	ldr	r1, [r3, #28]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      break;
 8002f14:	e021      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fb0b 	bl	8003538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	61da      	str	r2, [r3, #28]
      break;
 8002f56:	e000      	b.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIM_ConfigClockSource+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0b3      	b.n	80030ec <HAL_TIM_ConfigClockSource+0x180>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002faa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fbc:	d03e      	beq.n	800303c <HAL_TIM_ConfigClockSource+0xd0>
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	f200 8087 	bhi.w	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	f000 8085 	beq.w	80030d8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd2:	d87f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002fd4:	2b70      	cmp	r3, #112	; 0x70
 8002fd6:	d01a      	beq.n	800300e <HAL_TIM_ConfigClockSource+0xa2>
 8002fd8:	2b70      	cmp	r3, #112	; 0x70
 8002fda:	d87b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	d050      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x116>
 8002fe0:	2b60      	cmp	r3, #96	; 0x60
 8002fe2:	d877      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002fe4:	2b50      	cmp	r3, #80	; 0x50
 8002fe6:	d03c      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xf6>
 8002fe8:	2b50      	cmp	r3, #80	; 0x50
 8002fea:	d873      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d058      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x136>
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d86f      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002ff4:	2b30      	cmp	r3, #48	; 0x30
 8002ff6:	d064      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x156>
 8002ff8:	2b30      	cmp	r3, #48	; 0x30
 8002ffa:	d86b      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d060      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x156>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d867      	bhi.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d05c      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x156>
 8003008:	2b10      	cmp	r3, #16
 800300a:	d05a      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800300c:	e062      	b.n	80030d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6899      	ldr	r1, [r3, #8]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f000 fb5b 	bl	80036d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003030:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	609a      	str	r2, [r3, #8]
      break;
 800303a:	e04e      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6899      	ldr	r1, [r3, #8]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f000 fb44 	bl	80036d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800305e:	609a      	str	r2, [r3, #8]
      break;
 8003060:	e03b      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	f000 fab8 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2150      	movs	r1, #80	; 0x50
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fb11 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 8003080:	e02b      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f000 fad7 	bl	8003642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2160      	movs	r1, #96	; 0x60
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fb01 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e01b      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fa98 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 faf1 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e00b      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f000 fae8 	bl	80036a2 <TIM_ITRx_SetConfig>
        break;
 80030d2:	e002      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030d4:	bf00      	nop
 80030d6:	e000      	b.n	80030da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a40      	ldr	r2, [pc, #256]	; (8003258 <TIM_Base_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d00f      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3d      	ldr	r2, [pc, #244]	; (800325c <TIM_Base_SetConfig+0x118>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3c      	ldr	r2, [pc, #240]	; (8003260 <TIM_Base_SetConfig+0x11c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3b      	ldr	r2, [pc, #236]	; (8003264 <TIM_Base_SetConfig+0x120>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_Base_SetConfig+0x40>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3a      	ldr	r2, [pc, #232]	; (8003268 <TIM_Base_SetConfig+0x124>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2f      	ldr	r2, [pc, #188]	; (8003258 <TIM_Base_SetConfig+0x114>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d02b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d027      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2c      	ldr	r2, [pc, #176]	; (800325c <TIM_Base_SetConfig+0x118>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d023      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2b      	ldr	r2, [pc, #172]	; (8003260 <TIM_Base_SetConfig+0x11c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01f      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <TIM_Base_SetConfig+0x120>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a29      	ldr	r2, [pc, #164]	; (8003268 <TIM_Base_SetConfig+0x124>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d017      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a28      	ldr	r2, [pc, #160]	; (800326c <TIM_Base_SetConfig+0x128>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a27      	ldr	r2, [pc, #156]	; (8003270 <TIM_Base_SetConfig+0x12c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a26      	ldr	r2, [pc, #152]	; (8003274 <TIM_Base_SetConfig+0x130>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a25      	ldr	r2, [pc, #148]	; (8003278 <TIM_Base_SetConfig+0x134>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a24      	ldr	r2, [pc, #144]	; (800327c <TIM_Base_SetConfig+0x138>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <TIM_Base_SetConfig+0x13c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <TIM_Base_SetConfig+0x114>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0xf8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <TIM_Base_SetConfig+0x124>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	40001800 	.word	0x40001800
 800327c:	40001c00 	.word	0x40001c00
 8003280:	40002000 	.word	0x40002000

08003284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a20      	ldr	r2, [pc, #128]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_OC1_SetConfig+0x64>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10c      	bne.n	8003302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC1_SetConfig+0xd8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_OC1_SetConfig+0x8e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <TIM_OC1_SetConfig+0xdc>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d111      	bne.n	8003336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40010000 	.word	0x40010000
 8003360:	40010400 	.word	0x40010400

08003364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 0210 	bic.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0320 	bic.w	r3, r3, #32
 80033ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_OC2_SetConfig+0x68>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10d      	bne.n	80033e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a17      	ldr	r2, [pc, #92]	; (8003448 <TIM_OC2_SetConfig+0xe4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x94>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC2_SetConfig+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d113      	bne.n	8003420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40010400 	.word	0x40010400

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_OC3_SetConfig+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a20      	ldr	r2, [pc, #128]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10d      	bne.n	80034d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <TIM_OC3_SetConfig+0xe0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_OC3_SetConfig+0x92>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC3_SetConfig+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d113      	bne.n	800350a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	621a      	str	r2, [r3, #32]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40010000 	.word	0x40010000
 8003534:	40010400 	.word	0x40010400

08003538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	021b      	lsls	r3, r3, #8
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	031b      	lsls	r3, r3, #12
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <TIM_OC4_SetConfig+0xa4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC4_SetConfig+0x68>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a11      	ldr	r2, [pc, #68]	; (80035e0 <TIM_OC4_SetConfig+0xa8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d109      	bne.n	80035b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	621a      	str	r2, [r3, #32]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010400 	.word	0x40010400

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2201      	movs	r2, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003778:	2302      	movs	r3, #2
 800377a:	e05a      	b.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d01d      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10c      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40001800 	.word	0x40001800

0800385c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e03f      	b.n	8003916 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd fe26 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9a7 	bl	8003c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b08a      	sub	sp, #40	; 0x28
 8003922:	af02      	add	r7, sp, #8
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	d17c      	bne.n	8003a38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <HAL_UART_Transmit+0x2c>
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e075      	b.n	8003a3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_UART_Transmit+0x3e>
 8003958:	2302      	movs	r3, #2
 800395a:	e06e      	b.n	8003a3a <HAL_UART_Transmit+0x11c>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003972:	f7fd ffa7 	bl	80018c4 <HAL_GetTick>
 8003976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	88fa      	ldrh	r2, [r7, #6]
 8003982:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d108      	bne.n	80039a0 <HAL_UART_Transmit+0x82>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e003      	b.n	80039a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039b0:	e02a      	b.n	8003a08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f8e2 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e036      	b.n	8003a3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e007      	b.n	80039fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1cf      	bne.n	80039b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2140      	movs	r1, #64	; 0x40
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f8b2 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e006      	b.n	8003a3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b08a      	sub	sp, #40	; 0x28
 8003a46:	af02      	add	r7, sp, #8
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	f040 808c 	bne.w	8003b7c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Receive+0x2e>
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e084      	b.n	8003b7e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Receive+0x40>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e07d      	b.n	8003b7e <HAL_UART_Receive+0x13c>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2222      	movs	r2, #34	; 0x22
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a9e:	f7fd ff11 	bl	80018c4 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Receive+0x8a>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003adc:	e043      	b.n	8003b66 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2120      	movs	r1, #32
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f84c 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e042      	b.n	8003b7e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10c      	bne.n	8003b18 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	3302      	adds	r3, #2
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	e01f      	b.n	8003b58 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d007      	beq.n	8003b32 <HAL_UART_Receive+0xf0>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_UART_Receive+0xfe>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e008      	b.n	8003b52 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1b6      	bne.n	8003ade <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	e02c      	b.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d028      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba6:	f7fd fe8d 	bl	80018c4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d21d      	bcs.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e00f      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d0c3      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c20:	b09f      	sub	sp, #124	; 0x7c
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	68d9      	ldr	r1, [r3, #12]
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	ea40 0301 	orr.w	r3, r0, r1
 8003c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	431a      	orrs	r2, r3
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c60:	f021 010c 	bic.w	r1, r1, #12
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	6999      	ldr	r1, [r3, #24]
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	ea40 0301 	orr.w	r3, r0, r1
 8003c84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4bc5      	ldr	r3, [pc, #788]	; (8003fa0 <UART_SetConfig+0x384>)
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d004      	beq.n	8003c9a <UART_SetConfig+0x7e>
 8003c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4bc3      	ldr	r3, [pc, #780]	; (8003fa4 <UART_SetConfig+0x388>)
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d103      	bne.n	8003ca2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c9a:	f7fe fd4d 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8003c9e:	6778      	str	r0, [r7, #116]	; 0x74
 8003ca0:	e002      	b.n	8003ca8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ca2:	f7fe fd35 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003ca6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	f040 80b6 	bne.w	8003e20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb6:	461c      	mov	r4, r3
 8003cb8:	f04f 0500 	mov.w	r5, #0
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	6439      	str	r1, [r7, #64]	; 0x40
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ccc:	1912      	adds	r2, r2, r4
 8003cce:	eb45 0303 	adc.w	r3, r5, r3
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	00d9      	lsls	r1, r3, #3
 8003cdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ce0:	00d0      	lsls	r0, r2, #3
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	1911      	adds	r1, r2, r4
 8003ce8:	6639      	str	r1, [r7, #96]	; 0x60
 8003cea:	416b      	adcs	r3, r5
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d08:	f7fc fac2 	bl	8000290 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4ba5      	ldr	r3, [pc, #660]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003d12:	fba3 2302 	umull	r2, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	011e      	lsls	r6, r3, #4
 8003d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	f04f 0500 	mov.w	r5, #0
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6339      	str	r1, [r7, #48]	; 0x30
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d32:	1912      	adds	r2, r2, r4
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	00d9      	lsls	r1, r3, #3
 8003d42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d46:	00d0      	lsls	r0, r2, #3
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	1911      	adds	r1, r2, r4
 8003d4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d50:	416b      	adcs	r3, r5
 8003d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	1891      	adds	r1, r2, r2
 8003d60:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d62:	415b      	adcs	r3, r3
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d6e:	f7fc fa8f 	bl	8000290 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4b8c      	ldr	r3, [pc, #560]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003d78:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	2164      	movs	r1, #100	; 0x64
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	3332      	adds	r3, #50	; 0x32
 8003d8a:	4a87      	ldr	r2, [pc, #540]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d98:	441e      	add	r6, r3
 8003d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	1894      	adds	r4, r2, r2
 8003da8:	623c      	str	r4, [r7, #32]
 8003daa:	415b      	adcs	r3, r3
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db2:	1812      	adds	r2, r2, r0
 8003db4:	eb41 0303 	adc.w	r3, r1, r3
 8003db8:	f04f 0400 	mov.w	r4, #0
 8003dbc:	f04f 0500 	mov.w	r5, #0
 8003dc0:	00dd      	lsls	r5, r3, #3
 8003dc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dc6:	00d4      	lsls	r4, r2, #3
 8003dc8:	4622      	mov	r2, r4
 8003dca:	462b      	mov	r3, r5
 8003dcc:	1814      	adds	r4, r2, r0
 8003dce:	653c      	str	r4, [r7, #80]	; 0x50
 8003dd0:	414b      	adcs	r3, r1
 8003dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	1891      	adds	r1, r2, r2
 8003de0:	61b9      	str	r1, [r7, #24]
 8003de2:	415b      	adcs	r3, r3
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dee:	f7fc fa4f 	bl	8000290 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	3332      	adds	r3, #50	; 0x32
 8003e0a:	4a67      	ldr	r2, [pc, #412]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 0207 	and.w	r2, r3, #7
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4432      	add	r2, r6
 8003e1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e1e:	e0b9      	b.n	8003f94 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	461c      	mov	r4, r3
 8003e24:	f04f 0500 	mov.w	r5, #0
 8003e28:	4622      	mov	r2, r4
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	6139      	str	r1, [r7, #16]
 8003e30:	415b      	adcs	r3, r3
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e38:	1912      	adds	r2, r2, r4
 8003e3a:	eb45 0303 	adc.w	r3, r5, r3
 8003e3e:	f04f 0000 	mov.w	r0, #0
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	00d9      	lsls	r1, r3, #3
 8003e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e4c:	00d0      	lsls	r0, r2, #3
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	eb12 0804 	adds.w	r8, r2, r4
 8003e56:	eb43 0905 	adc.w	r9, r3, r5
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	008b      	lsls	r3, r1, #2
 8003e6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e72:	0082      	lsls	r2, r0, #2
 8003e74:	4640      	mov	r0, r8
 8003e76:	4649      	mov	r1, r9
 8003e78:	f7fc fa0a 	bl	8000290 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003e82:	fba3 2302 	umull	r2, r3, r3, r2
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	011e      	lsls	r6, r3, #4
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	1894      	adds	r4, r2, r2
 8003e98:	60bc      	str	r4, [r7, #8]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea2:	1812      	adds	r2, r2, r0
 8003ea4:	eb41 0303 	adc.w	r3, r1, r3
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	f04f 0500 	mov.w	r5, #0
 8003eb0:	00dd      	lsls	r5, r3, #3
 8003eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eb6:	00d4      	lsls	r4, r2, #3
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	1814      	adds	r4, r2, r0
 8003ebe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ec0:	414b      	adcs	r3, r1
 8003ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	008b      	lsls	r3, r1, #2
 8003ed8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003edc:	0082      	lsls	r2, r0, #2
 8003ede:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ee2:	f7fc f9d5 	bl	8000290 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f0a:	441e      	add	r6, r3
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	1894      	adds	r4, r2, r2
 8003f1a:	603c      	str	r4, [r7, #0]
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f24:	1812      	adds	r2, r2, r0
 8003f26:	eb41 0303 	adc.w	r3, r1, r3
 8003f2a:	f04f 0400 	mov.w	r4, #0
 8003f2e:	f04f 0500 	mov.w	r5, #0
 8003f32:	00dd      	lsls	r5, r3, #3
 8003f34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f38:	00d4      	lsls	r4, r2, #3
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f42:	eb43 0b01 	adc.w	fp, r3, r1
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	008b      	lsls	r3, r1, #2
 8003f5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f5e:	0082      	lsls	r2, r0, #2
 8003f60:	4650      	mov	r0, sl
 8003f62:	4659      	mov	r1, fp
 8003f64:	f7fc f994 	bl	8000290 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003f6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2164      	movs	r1, #100	; 0x64
 8003f76:	fb01 f303 	mul.w	r3, r1, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	3332      	adds	r3, #50	; 0x32
 8003f80:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <UART_SetConfig+0x38c>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f003 020f 	and.w	r2, r3, #15
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4432      	add	r2, r6
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	377c      	adds	r7, #124	; 0x7c
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40011000 	.word	0x40011000
 8003fa4:	40011400 	.word	0x40011400
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <atoi>:
 8003fac:	220a      	movs	r2, #10
 8003fae:	2100      	movs	r1, #0
 8003fb0:	f000 b948 	b.w	8004244 <strtol>

08003fb4 <__errno>:
 8003fb4:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <__errno+0x8>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <__libc_init_array>:
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	4d0d      	ldr	r5, [pc, #52]	; (8003ff8 <__libc_init_array+0x38>)
 8003fc4:	4c0d      	ldr	r4, [pc, #52]	; (8003ffc <__libc_init_array+0x3c>)
 8003fc6:	1b64      	subs	r4, r4, r5
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	2600      	movs	r6, #0
 8003fcc:	42a6      	cmp	r6, r4
 8003fce:	d109      	bne.n	8003fe4 <__libc_init_array+0x24>
 8003fd0:	4d0b      	ldr	r5, [pc, #44]	; (8004000 <__libc_init_array+0x40>)
 8003fd2:	4c0c      	ldr	r4, [pc, #48]	; (8004004 <__libc_init_array+0x44>)
 8003fd4:	f001 faa6 	bl	8005524 <_init>
 8003fd8:	1b64      	subs	r4, r4, r5
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	2600      	movs	r6, #0
 8003fde:	42a6      	cmp	r6, r4
 8003fe0:	d105      	bne.n	8003fee <__libc_init_array+0x2e>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe8:	4798      	blx	r3
 8003fea:	3601      	adds	r6, #1
 8003fec:	e7ee      	b.n	8003fcc <__libc_init_array+0xc>
 8003fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff2:	4798      	blx	r3
 8003ff4:	3601      	adds	r6, #1
 8003ff6:	e7f2      	b.n	8003fde <__libc_init_array+0x1e>
 8003ff8:	08005828 	.word	0x08005828
 8003ffc:	08005828 	.word	0x08005828
 8004000:	08005828 	.word	0x08005828
 8004004:	0800582c 	.word	0x0800582c

08004008 <memcpy>:
 8004008:	440a      	add	r2, r1
 800400a:	4291      	cmp	r1, r2
 800400c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004010:	d100      	bne.n	8004014 <memcpy+0xc>
 8004012:	4770      	bx	lr
 8004014:	b510      	push	{r4, lr}
 8004016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800401e:	4291      	cmp	r1, r2
 8004020:	d1f9      	bne.n	8004016 <memcpy+0xe>
 8004022:	bd10      	pop	{r4, pc}

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <siprintf>:
 8004034:	b40e      	push	{r1, r2, r3}
 8004036:	b500      	push	{lr}
 8004038:	b09c      	sub	sp, #112	; 0x70
 800403a:	ab1d      	add	r3, sp, #116	; 0x74
 800403c:	9002      	str	r0, [sp, #8]
 800403e:	9006      	str	r0, [sp, #24]
 8004040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <siprintf+0x38>)
 8004046:	9107      	str	r1, [sp, #28]
 8004048:	9104      	str	r1, [sp, #16]
 800404a:	4909      	ldr	r1, [pc, #36]	; (8004070 <siprintf+0x3c>)
 800404c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	a902      	add	r1, sp, #8
 8004058:	f000 fa3c 	bl	80044d4 <_svfiprintf_r>
 800405c:	9b02      	ldr	r3, [sp, #8]
 800405e:	2200      	movs	r2, #0
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	b01c      	add	sp, #112	; 0x70
 8004064:	f85d eb04 	ldr.w	lr, [sp], #4
 8004068:	b003      	add	sp, #12
 800406a:	4770      	bx	lr
 800406c:	20000010 	.word	0x20000010
 8004070:	ffff0208 	.word	0xffff0208

08004074 <strcpy>:
 8004074:	4603      	mov	r3, r0
 8004076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800407a:	f803 2b01 	strb.w	r2, [r3], #1
 800407e:	2a00      	cmp	r2, #0
 8004080:	d1f9      	bne.n	8004076 <strcpy+0x2>
 8004082:	4770      	bx	lr

08004084 <strtok>:
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <strtok+0x5c>)
 8004086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004088:	681e      	ldr	r6, [r3, #0]
 800408a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800408c:	4605      	mov	r5, r0
 800408e:	b9fc      	cbnz	r4, 80040d0 <strtok+0x4c>
 8004090:	2050      	movs	r0, #80	; 0x50
 8004092:	9101      	str	r1, [sp, #4]
 8004094:	f000 f910 	bl	80042b8 <malloc>
 8004098:	9901      	ldr	r1, [sp, #4]
 800409a:	65b0      	str	r0, [r6, #88]	; 0x58
 800409c:	4602      	mov	r2, r0
 800409e:	b920      	cbnz	r0, 80040aa <strtok+0x26>
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <strtok+0x60>)
 80040a2:	4811      	ldr	r0, [pc, #68]	; (80040e8 <strtok+0x64>)
 80040a4:	2157      	movs	r1, #87	; 0x57
 80040a6:	f000 f8d7 	bl	8004258 <__assert_func>
 80040aa:	e9c0 4400 	strd	r4, r4, [r0]
 80040ae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80040b2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80040b6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80040ba:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80040be:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80040c2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80040c6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80040ca:	6184      	str	r4, [r0, #24]
 80040cc:	7704      	strb	r4, [r0, #28]
 80040ce:	6244      	str	r4, [r0, #36]	; 0x24
 80040d0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80040d2:	2301      	movs	r3, #1
 80040d4:	4628      	mov	r0, r5
 80040d6:	b002      	add	sp, #8
 80040d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040dc:	f000 b806 	b.w	80040ec <__strtok_r>
 80040e0:	20000010 	.word	0x20000010
 80040e4:	080055d8 	.word	0x080055d8
 80040e8:	080055ef 	.word	0x080055ef

080040ec <__strtok_r>:
 80040ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ee:	b908      	cbnz	r0, 80040f4 <__strtok_r+0x8>
 80040f0:	6810      	ldr	r0, [r2, #0]
 80040f2:	b188      	cbz	r0, 8004118 <__strtok_r+0x2c>
 80040f4:	4604      	mov	r4, r0
 80040f6:	4620      	mov	r0, r4
 80040f8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80040fc:	460f      	mov	r7, r1
 80040fe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004102:	b91e      	cbnz	r6, 800410c <__strtok_r+0x20>
 8004104:	b965      	cbnz	r5, 8004120 <__strtok_r+0x34>
 8004106:	6015      	str	r5, [r2, #0]
 8004108:	4628      	mov	r0, r5
 800410a:	e005      	b.n	8004118 <__strtok_r+0x2c>
 800410c:	42b5      	cmp	r5, r6
 800410e:	d1f6      	bne.n	80040fe <__strtok_r+0x12>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f0      	bne.n	80040f6 <__strtok_r+0xa>
 8004114:	6014      	str	r4, [r2, #0]
 8004116:	7003      	strb	r3, [r0, #0]
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411a:	461c      	mov	r4, r3
 800411c:	e00c      	b.n	8004138 <__strtok_r+0x4c>
 800411e:	b915      	cbnz	r5, 8004126 <__strtok_r+0x3a>
 8004120:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004124:	460e      	mov	r6, r1
 8004126:	f816 5b01 	ldrb.w	r5, [r6], #1
 800412a:	42ab      	cmp	r3, r5
 800412c:	d1f7      	bne.n	800411e <__strtok_r+0x32>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f3      	beq.n	800411a <__strtok_r+0x2e>
 8004132:	2300      	movs	r3, #0
 8004134:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	e7ed      	b.n	8004118 <__strtok_r+0x2c>

0800413c <_strtol_l.isra.0>:
 800413c:	2b01      	cmp	r3, #1
 800413e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004142:	d001      	beq.n	8004148 <_strtol_l.isra.0+0xc>
 8004144:	2b24      	cmp	r3, #36	; 0x24
 8004146:	d906      	bls.n	8004156 <_strtol_l.isra.0+0x1a>
 8004148:	f7ff ff34 	bl	8003fb4 <__errno>
 800414c:	2316      	movs	r3, #22
 800414e:	6003      	str	r3, [r0, #0]
 8004150:	2000      	movs	r0, #0
 8004152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004156:	4f3a      	ldr	r7, [pc, #232]	; (8004240 <_strtol_l.isra.0+0x104>)
 8004158:	468e      	mov	lr, r1
 800415a:	4676      	mov	r6, lr
 800415c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004160:	5de5      	ldrb	r5, [r4, r7]
 8004162:	f015 0508 	ands.w	r5, r5, #8
 8004166:	d1f8      	bne.n	800415a <_strtol_l.isra.0+0x1e>
 8004168:	2c2d      	cmp	r4, #45	; 0x2d
 800416a:	d134      	bne.n	80041d6 <_strtol_l.isra.0+0x9a>
 800416c:	f89e 4000 	ldrb.w	r4, [lr]
 8004170:	f04f 0801 	mov.w	r8, #1
 8004174:	f106 0e02 	add.w	lr, r6, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05c      	beq.n	8004236 <_strtol_l.isra.0+0xfa>
 800417c:	2b10      	cmp	r3, #16
 800417e:	d10c      	bne.n	800419a <_strtol_l.isra.0+0x5e>
 8004180:	2c30      	cmp	r4, #48	; 0x30
 8004182:	d10a      	bne.n	800419a <_strtol_l.isra.0+0x5e>
 8004184:	f89e 4000 	ldrb.w	r4, [lr]
 8004188:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800418c:	2c58      	cmp	r4, #88	; 0x58
 800418e:	d14d      	bne.n	800422c <_strtol_l.isra.0+0xf0>
 8004190:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004194:	2310      	movs	r3, #16
 8004196:	f10e 0e02 	add.w	lr, lr, #2
 800419a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800419e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80041a2:	2600      	movs	r6, #0
 80041a4:	fbbc f9f3 	udiv	r9, ip, r3
 80041a8:	4635      	mov	r5, r6
 80041aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80041ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80041b2:	2f09      	cmp	r7, #9
 80041b4:	d818      	bhi.n	80041e8 <_strtol_l.isra.0+0xac>
 80041b6:	463c      	mov	r4, r7
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	dd24      	ble.n	8004206 <_strtol_l.isra.0+0xca>
 80041bc:	2e00      	cmp	r6, #0
 80041be:	db1f      	blt.n	8004200 <_strtol_l.isra.0+0xc4>
 80041c0:	45a9      	cmp	r9, r5
 80041c2:	d31d      	bcc.n	8004200 <_strtol_l.isra.0+0xc4>
 80041c4:	d101      	bne.n	80041ca <_strtol_l.isra.0+0x8e>
 80041c6:	45a2      	cmp	sl, r4
 80041c8:	db1a      	blt.n	8004200 <_strtol_l.isra.0+0xc4>
 80041ca:	fb05 4503 	mla	r5, r5, r3, r4
 80041ce:	2601      	movs	r6, #1
 80041d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80041d4:	e7eb      	b.n	80041ae <_strtol_l.isra.0+0x72>
 80041d6:	2c2b      	cmp	r4, #43	; 0x2b
 80041d8:	bf08      	it	eq
 80041da:	f89e 4000 	ldrbeq.w	r4, [lr]
 80041de:	46a8      	mov	r8, r5
 80041e0:	bf08      	it	eq
 80041e2:	f106 0e02 	addeq.w	lr, r6, #2
 80041e6:	e7c7      	b.n	8004178 <_strtol_l.isra.0+0x3c>
 80041e8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80041ec:	2f19      	cmp	r7, #25
 80041ee:	d801      	bhi.n	80041f4 <_strtol_l.isra.0+0xb8>
 80041f0:	3c37      	subs	r4, #55	; 0x37
 80041f2:	e7e1      	b.n	80041b8 <_strtol_l.isra.0+0x7c>
 80041f4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80041f8:	2f19      	cmp	r7, #25
 80041fa:	d804      	bhi.n	8004206 <_strtol_l.isra.0+0xca>
 80041fc:	3c57      	subs	r4, #87	; 0x57
 80041fe:	e7db      	b.n	80041b8 <_strtol_l.isra.0+0x7c>
 8004200:	f04f 36ff 	mov.w	r6, #4294967295
 8004204:	e7e4      	b.n	80041d0 <_strtol_l.isra.0+0x94>
 8004206:	2e00      	cmp	r6, #0
 8004208:	da05      	bge.n	8004216 <_strtol_l.isra.0+0xda>
 800420a:	2322      	movs	r3, #34	; 0x22
 800420c:	6003      	str	r3, [r0, #0]
 800420e:	4665      	mov	r5, ip
 8004210:	b942      	cbnz	r2, 8004224 <_strtol_l.isra.0+0xe8>
 8004212:	4628      	mov	r0, r5
 8004214:	e79d      	b.n	8004152 <_strtol_l.isra.0+0x16>
 8004216:	f1b8 0f00 	cmp.w	r8, #0
 800421a:	d000      	beq.n	800421e <_strtol_l.isra.0+0xe2>
 800421c:	426d      	negs	r5, r5
 800421e:	2a00      	cmp	r2, #0
 8004220:	d0f7      	beq.n	8004212 <_strtol_l.isra.0+0xd6>
 8004222:	b10e      	cbz	r6, 8004228 <_strtol_l.isra.0+0xec>
 8004224:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	e7f2      	b.n	8004212 <_strtol_l.isra.0+0xd6>
 800422c:	2430      	movs	r4, #48	; 0x30
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1b3      	bne.n	800419a <_strtol_l.isra.0+0x5e>
 8004232:	2308      	movs	r3, #8
 8004234:	e7b1      	b.n	800419a <_strtol_l.isra.0+0x5e>
 8004236:	2c30      	cmp	r4, #48	; 0x30
 8004238:	d0a4      	beq.n	8004184 <_strtol_l.isra.0+0x48>
 800423a:	230a      	movs	r3, #10
 800423c:	e7ad      	b.n	800419a <_strtol_l.isra.0+0x5e>
 800423e:	bf00      	nop
 8004240:	0800568d 	.word	0x0800568d

08004244 <strtol>:
 8004244:	4613      	mov	r3, r2
 8004246:	460a      	mov	r2, r1
 8004248:	4601      	mov	r1, r0
 800424a:	4802      	ldr	r0, [pc, #8]	; (8004254 <strtol+0x10>)
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f7ff bf75 	b.w	800413c <_strtol_l.isra.0>
 8004252:	bf00      	nop
 8004254:	20000010 	.word	0x20000010

08004258 <__assert_func>:
 8004258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800425a:	4614      	mov	r4, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <__assert_func+0x2c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4605      	mov	r5, r0
 8004264:	68d8      	ldr	r0, [r3, #12]
 8004266:	b14c      	cbz	r4, 800427c <__assert_func+0x24>
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <__assert_func+0x30>)
 800426a:	9100      	str	r1, [sp, #0]
 800426c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <__assert_func+0x34>)
 8004272:	462b      	mov	r3, r5
 8004274:	f000 f80e 	bl	8004294 <fiprintf>
 8004278:	f000 fdea 	bl	8004e50 <abort>
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <__assert_func+0x38>)
 800427e:	461c      	mov	r4, r3
 8004280:	e7f3      	b.n	800426a <__assert_func+0x12>
 8004282:	bf00      	nop
 8004284:	20000010 	.word	0x20000010
 8004288:	08005650 	.word	0x08005650
 800428c:	0800565d 	.word	0x0800565d
 8004290:	0800568b 	.word	0x0800568b

08004294 <fiprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	b503      	push	{r0, r1, lr}
 8004298:	4601      	mov	r1, r0
 800429a:	ab03      	add	r3, sp, #12
 800429c:	4805      	ldr	r0, [pc, #20]	; (80042b4 <fiprintf+0x20>)
 800429e:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a2:	6800      	ldr	r0, [r0, #0]
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f000 fa3f 	bl	8004728 <_vfiprintf_r>
 80042aa:	b002      	add	sp, #8
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b003      	add	sp, #12
 80042b2:	4770      	bx	lr
 80042b4:	20000010 	.word	0x20000010

080042b8 <malloc>:
 80042b8:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <malloc+0xc>)
 80042ba:	4601      	mov	r1, r0
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f000 b853 	b.w	8004368 <_malloc_r>
 80042c2:	bf00      	nop
 80042c4:	20000010 	.word	0x20000010

080042c8 <_free_r>:
 80042c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042ca:	2900      	cmp	r1, #0
 80042cc:	d048      	beq.n	8004360 <_free_r+0x98>
 80042ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d2:	9001      	str	r0, [sp, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f1a1 0404 	sub.w	r4, r1, #4
 80042da:	bfb8      	it	lt
 80042dc:	18e4      	addlt	r4, r4, r3
 80042de:	f000 fff7 	bl	80052d0 <__malloc_lock>
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <_free_r+0x9c>)
 80042e4:	9801      	ldr	r0, [sp, #4]
 80042e6:	6813      	ldr	r3, [r2, #0]
 80042e8:	4615      	mov	r5, r2
 80042ea:	b933      	cbnz	r3, 80042fa <_free_r+0x32>
 80042ec:	6063      	str	r3, [r4, #4]
 80042ee:	6014      	str	r4, [r2, #0]
 80042f0:	b003      	add	sp, #12
 80042f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042f6:	f000 bff1 	b.w	80052dc <__malloc_unlock>
 80042fa:	42a3      	cmp	r3, r4
 80042fc:	d90b      	bls.n	8004316 <_free_r+0x4e>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	1862      	adds	r2, r4, r1
 8004302:	4293      	cmp	r3, r2
 8004304:	bf04      	itt	eq
 8004306:	681a      	ldreq	r2, [r3, #0]
 8004308:	685b      	ldreq	r3, [r3, #4]
 800430a:	6063      	str	r3, [r4, #4]
 800430c:	bf04      	itt	eq
 800430e:	1852      	addeq	r2, r2, r1
 8004310:	6022      	streq	r2, [r4, #0]
 8004312:	602c      	str	r4, [r5, #0]
 8004314:	e7ec      	b.n	80042f0 <_free_r+0x28>
 8004316:	461a      	mov	r2, r3
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b10b      	cbz	r3, 8004320 <_free_r+0x58>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d9fa      	bls.n	8004316 <_free_r+0x4e>
 8004320:	6811      	ldr	r1, [r2, #0]
 8004322:	1855      	adds	r5, r2, r1
 8004324:	42a5      	cmp	r5, r4
 8004326:	d10b      	bne.n	8004340 <_free_r+0x78>
 8004328:	6824      	ldr	r4, [r4, #0]
 800432a:	4421      	add	r1, r4
 800432c:	1854      	adds	r4, r2, r1
 800432e:	42a3      	cmp	r3, r4
 8004330:	6011      	str	r1, [r2, #0]
 8004332:	d1dd      	bne.n	80042f0 <_free_r+0x28>
 8004334:	681c      	ldr	r4, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	6053      	str	r3, [r2, #4]
 800433a:	4421      	add	r1, r4
 800433c:	6011      	str	r1, [r2, #0]
 800433e:	e7d7      	b.n	80042f0 <_free_r+0x28>
 8004340:	d902      	bls.n	8004348 <_free_r+0x80>
 8004342:	230c      	movs	r3, #12
 8004344:	6003      	str	r3, [r0, #0]
 8004346:	e7d3      	b.n	80042f0 <_free_r+0x28>
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	1961      	adds	r1, r4, r5
 800434c:	428b      	cmp	r3, r1
 800434e:	bf04      	itt	eq
 8004350:	6819      	ldreq	r1, [r3, #0]
 8004352:	685b      	ldreq	r3, [r3, #4]
 8004354:	6063      	str	r3, [r4, #4]
 8004356:	bf04      	itt	eq
 8004358:	1949      	addeq	r1, r1, r5
 800435a:	6021      	streq	r1, [r4, #0]
 800435c:	6054      	str	r4, [r2, #4]
 800435e:	e7c7      	b.n	80042f0 <_free_r+0x28>
 8004360:	b003      	add	sp, #12
 8004362:	bd30      	pop	{r4, r5, pc}
 8004364:	200000b4 	.word	0x200000b4

08004368 <_malloc_r>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	1ccd      	adds	r5, r1, #3
 800436c:	f025 0503 	bic.w	r5, r5, #3
 8004370:	3508      	adds	r5, #8
 8004372:	2d0c      	cmp	r5, #12
 8004374:	bf38      	it	cc
 8004376:	250c      	movcc	r5, #12
 8004378:	2d00      	cmp	r5, #0
 800437a:	4606      	mov	r6, r0
 800437c:	db01      	blt.n	8004382 <_malloc_r+0x1a>
 800437e:	42a9      	cmp	r1, r5
 8004380:	d903      	bls.n	800438a <_malloc_r+0x22>
 8004382:	230c      	movs	r3, #12
 8004384:	6033      	str	r3, [r6, #0]
 8004386:	2000      	movs	r0, #0
 8004388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800438a:	f000 ffa1 	bl	80052d0 <__malloc_lock>
 800438e:	4921      	ldr	r1, [pc, #132]	; (8004414 <_malloc_r+0xac>)
 8004390:	680a      	ldr	r2, [r1, #0]
 8004392:	4614      	mov	r4, r2
 8004394:	b99c      	cbnz	r4, 80043be <_malloc_r+0x56>
 8004396:	4f20      	ldr	r7, [pc, #128]	; (8004418 <_malloc_r+0xb0>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	b923      	cbnz	r3, 80043a6 <_malloc_r+0x3e>
 800439c:	4621      	mov	r1, r4
 800439e:	4630      	mov	r0, r6
 80043a0:	f000 fc86 	bl	8004cb0 <_sbrk_r>
 80043a4:	6038      	str	r0, [r7, #0]
 80043a6:	4629      	mov	r1, r5
 80043a8:	4630      	mov	r0, r6
 80043aa:	f000 fc81 	bl	8004cb0 <_sbrk_r>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d123      	bne.n	80043fa <_malloc_r+0x92>
 80043b2:	230c      	movs	r3, #12
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	4630      	mov	r0, r6
 80043b8:	f000 ff90 	bl	80052dc <__malloc_unlock>
 80043bc:	e7e3      	b.n	8004386 <_malloc_r+0x1e>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	1b5b      	subs	r3, r3, r5
 80043c2:	d417      	bmi.n	80043f4 <_malloc_r+0x8c>
 80043c4:	2b0b      	cmp	r3, #11
 80043c6:	d903      	bls.n	80043d0 <_malloc_r+0x68>
 80043c8:	6023      	str	r3, [r4, #0]
 80043ca:	441c      	add	r4, r3
 80043cc:	6025      	str	r5, [r4, #0]
 80043ce:	e004      	b.n	80043da <_malloc_r+0x72>
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	42a2      	cmp	r2, r4
 80043d4:	bf0c      	ite	eq
 80043d6:	600b      	streq	r3, [r1, #0]
 80043d8:	6053      	strne	r3, [r2, #4]
 80043da:	4630      	mov	r0, r6
 80043dc:	f000 ff7e 	bl	80052dc <__malloc_unlock>
 80043e0:	f104 000b 	add.w	r0, r4, #11
 80043e4:	1d23      	adds	r3, r4, #4
 80043e6:	f020 0007 	bic.w	r0, r0, #7
 80043ea:	1ac2      	subs	r2, r0, r3
 80043ec:	d0cc      	beq.n	8004388 <_malloc_r+0x20>
 80043ee:	1a1b      	subs	r3, r3, r0
 80043f0:	50a3      	str	r3, [r4, r2]
 80043f2:	e7c9      	b.n	8004388 <_malloc_r+0x20>
 80043f4:	4622      	mov	r2, r4
 80043f6:	6864      	ldr	r4, [r4, #4]
 80043f8:	e7cc      	b.n	8004394 <_malloc_r+0x2c>
 80043fa:	1cc4      	adds	r4, r0, #3
 80043fc:	f024 0403 	bic.w	r4, r4, #3
 8004400:	42a0      	cmp	r0, r4
 8004402:	d0e3      	beq.n	80043cc <_malloc_r+0x64>
 8004404:	1a21      	subs	r1, r4, r0
 8004406:	4630      	mov	r0, r6
 8004408:	f000 fc52 	bl	8004cb0 <_sbrk_r>
 800440c:	3001      	adds	r0, #1
 800440e:	d1dd      	bne.n	80043cc <_malloc_r+0x64>
 8004410:	e7cf      	b.n	80043b2 <_malloc_r+0x4a>
 8004412:	bf00      	nop
 8004414:	200000b4 	.word	0x200000b4
 8004418:	200000b8 	.word	0x200000b8

0800441c <__ssputs_r>:
 800441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004420:	688e      	ldr	r6, [r1, #8]
 8004422:	429e      	cmp	r6, r3
 8004424:	4682      	mov	sl, r0
 8004426:	460c      	mov	r4, r1
 8004428:	4690      	mov	r8, r2
 800442a:	461f      	mov	r7, r3
 800442c:	d838      	bhi.n	80044a0 <__ssputs_r+0x84>
 800442e:	898a      	ldrh	r2, [r1, #12]
 8004430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004434:	d032      	beq.n	800449c <__ssputs_r+0x80>
 8004436:	6825      	ldr	r5, [r4, #0]
 8004438:	6909      	ldr	r1, [r1, #16]
 800443a:	eba5 0901 	sub.w	r9, r5, r1
 800443e:	6965      	ldr	r5, [r4, #20]
 8004440:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004448:	3301      	adds	r3, #1
 800444a:	444b      	add	r3, r9
 800444c:	106d      	asrs	r5, r5, #1
 800444e:	429d      	cmp	r5, r3
 8004450:	bf38      	it	cc
 8004452:	461d      	movcc	r5, r3
 8004454:	0553      	lsls	r3, r2, #21
 8004456:	d531      	bpl.n	80044bc <__ssputs_r+0xa0>
 8004458:	4629      	mov	r1, r5
 800445a:	f7ff ff85 	bl	8004368 <_malloc_r>
 800445e:	4606      	mov	r6, r0
 8004460:	b950      	cbnz	r0, 8004478 <__ssputs_r+0x5c>
 8004462:	230c      	movs	r3, #12
 8004464:	f8ca 3000 	str.w	r3, [sl]
 8004468:	89a3      	ldrh	r3, [r4, #12]
 800446a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	6921      	ldr	r1, [r4, #16]
 800447a:	464a      	mov	r2, r9
 800447c:	f7ff fdc4 	bl	8004008 <memcpy>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	6126      	str	r6, [r4, #16]
 800448e:	6165      	str	r5, [r4, #20]
 8004490:	444e      	add	r6, r9
 8004492:	eba5 0509 	sub.w	r5, r5, r9
 8004496:	6026      	str	r6, [r4, #0]
 8004498:	60a5      	str	r5, [r4, #8]
 800449a:	463e      	mov	r6, r7
 800449c:	42be      	cmp	r6, r7
 800449e:	d900      	bls.n	80044a2 <__ssputs_r+0x86>
 80044a0:	463e      	mov	r6, r7
 80044a2:	4632      	mov	r2, r6
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	4641      	mov	r1, r8
 80044a8:	f000 fef8 	bl	800529c <memmove>
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	1b9b      	subs	r3, r3, r6
 80044b2:	4432      	add	r2, r6
 80044b4:	60a3      	str	r3, [r4, #8]
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	2000      	movs	r0, #0
 80044ba:	e7db      	b.n	8004474 <__ssputs_r+0x58>
 80044bc:	462a      	mov	r2, r5
 80044be:	f000 ff13 	bl	80052e8 <_realloc_r>
 80044c2:	4606      	mov	r6, r0
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d1e1      	bne.n	800448c <__ssputs_r+0x70>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	4650      	mov	r0, sl
 80044cc:	f7ff fefc 	bl	80042c8 <_free_r>
 80044d0:	e7c7      	b.n	8004462 <__ssputs_r+0x46>
	...

080044d4 <_svfiprintf_r>:
 80044d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d8:	4698      	mov	r8, r3
 80044da:	898b      	ldrh	r3, [r1, #12]
 80044dc:	061b      	lsls	r3, r3, #24
 80044de:	b09d      	sub	sp, #116	; 0x74
 80044e0:	4607      	mov	r7, r0
 80044e2:	460d      	mov	r5, r1
 80044e4:	4614      	mov	r4, r2
 80044e6:	d50e      	bpl.n	8004506 <_svfiprintf_r+0x32>
 80044e8:	690b      	ldr	r3, [r1, #16]
 80044ea:	b963      	cbnz	r3, 8004506 <_svfiprintf_r+0x32>
 80044ec:	2140      	movs	r1, #64	; 0x40
 80044ee:	f7ff ff3b 	bl	8004368 <_malloc_r>
 80044f2:	6028      	str	r0, [r5, #0]
 80044f4:	6128      	str	r0, [r5, #16]
 80044f6:	b920      	cbnz	r0, 8004502 <_svfiprintf_r+0x2e>
 80044f8:	230c      	movs	r3, #12
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	e0d1      	b.n	80046a6 <_svfiprintf_r+0x1d2>
 8004502:	2340      	movs	r3, #64	; 0x40
 8004504:	616b      	str	r3, [r5, #20]
 8004506:	2300      	movs	r3, #0
 8004508:	9309      	str	r3, [sp, #36]	; 0x24
 800450a:	2320      	movs	r3, #32
 800450c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004510:	f8cd 800c 	str.w	r8, [sp, #12]
 8004514:	2330      	movs	r3, #48	; 0x30
 8004516:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046c0 <_svfiprintf_r+0x1ec>
 800451a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800451e:	f04f 0901 	mov.w	r9, #1
 8004522:	4623      	mov	r3, r4
 8004524:	469a      	mov	sl, r3
 8004526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800452a:	b10a      	cbz	r2, 8004530 <_svfiprintf_r+0x5c>
 800452c:	2a25      	cmp	r2, #37	; 0x25
 800452e:	d1f9      	bne.n	8004524 <_svfiprintf_r+0x50>
 8004530:	ebba 0b04 	subs.w	fp, sl, r4
 8004534:	d00b      	beq.n	800454e <_svfiprintf_r+0x7a>
 8004536:	465b      	mov	r3, fp
 8004538:	4622      	mov	r2, r4
 800453a:	4629      	mov	r1, r5
 800453c:	4638      	mov	r0, r7
 800453e:	f7ff ff6d 	bl	800441c <__ssputs_r>
 8004542:	3001      	adds	r0, #1
 8004544:	f000 80aa 	beq.w	800469c <_svfiprintf_r+0x1c8>
 8004548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800454a:	445a      	add	r2, fp
 800454c:	9209      	str	r2, [sp, #36]	; 0x24
 800454e:	f89a 3000 	ldrb.w	r3, [sl]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a2 	beq.w	800469c <_svfiprintf_r+0x1c8>
 8004558:	2300      	movs	r3, #0
 800455a:	f04f 32ff 	mov.w	r2, #4294967295
 800455e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004562:	f10a 0a01 	add.w	sl, sl, #1
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	9307      	str	r3, [sp, #28]
 800456a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800456e:	931a      	str	r3, [sp, #104]	; 0x68
 8004570:	4654      	mov	r4, sl
 8004572:	2205      	movs	r2, #5
 8004574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004578:	4851      	ldr	r0, [pc, #324]	; (80046c0 <_svfiprintf_r+0x1ec>)
 800457a:	f7fb fe39 	bl	80001f0 <memchr>
 800457e:	9a04      	ldr	r2, [sp, #16]
 8004580:	b9d8      	cbnz	r0, 80045ba <_svfiprintf_r+0xe6>
 8004582:	06d0      	lsls	r0, r2, #27
 8004584:	bf44      	itt	mi
 8004586:	2320      	movmi	r3, #32
 8004588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800458c:	0711      	lsls	r1, r2, #28
 800458e:	bf44      	itt	mi
 8004590:	232b      	movmi	r3, #43	; 0x2b
 8004592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004596:	f89a 3000 	ldrb.w	r3, [sl]
 800459a:	2b2a      	cmp	r3, #42	; 0x2a
 800459c:	d015      	beq.n	80045ca <_svfiprintf_r+0xf6>
 800459e:	9a07      	ldr	r2, [sp, #28]
 80045a0:	4654      	mov	r4, sl
 80045a2:	2000      	movs	r0, #0
 80045a4:	f04f 0c0a 	mov.w	ip, #10
 80045a8:	4621      	mov	r1, r4
 80045aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ae:	3b30      	subs	r3, #48	; 0x30
 80045b0:	2b09      	cmp	r3, #9
 80045b2:	d94e      	bls.n	8004652 <_svfiprintf_r+0x17e>
 80045b4:	b1b0      	cbz	r0, 80045e4 <_svfiprintf_r+0x110>
 80045b6:	9207      	str	r2, [sp, #28]
 80045b8:	e014      	b.n	80045e4 <_svfiprintf_r+0x110>
 80045ba:	eba0 0308 	sub.w	r3, r0, r8
 80045be:	fa09 f303 	lsl.w	r3, r9, r3
 80045c2:	4313      	orrs	r3, r2
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	46a2      	mov	sl, r4
 80045c8:	e7d2      	b.n	8004570 <_svfiprintf_r+0x9c>
 80045ca:	9b03      	ldr	r3, [sp, #12]
 80045cc:	1d19      	adds	r1, r3, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	9103      	str	r1, [sp, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfbb      	ittet	lt
 80045d6:	425b      	neglt	r3, r3
 80045d8:	f042 0202 	orrlt.w	r2, r2, #2
 80045dc:	9307      	strge	r3, [sp, #28]
 80045de:	9307      	strlt	r3, [sp, #28]
 80045e0:	bfb8      	it	lt
 80045e2:	9204      	strlt	r2, [sp, #16]
 80045e4:	7823      	ldrb	r3, [r4, #0]
 80045e6:	2b2e      	cmp	r3, #46	; 0x2e
 80045e8:	d10c      	bne.n	8004604 <_svfiprintf_r+0x130>
 80045ea:	7863      	ldrb	r3, [r4, #1]
 80045ec:	2b2a      	cmp	r3, #42	; 0x2a
 80045ee:	d135      	bne.n	800465c <_svfiprintf_r+0x188>
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	9203      	str	r2, [sp, #12]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bfb8      	it	lt
 80045fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004600:	3402      	adds	r4, #2
 8004602:	9305      	str	r3, [sp, #20]
 8004604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046d0 <_svfiprintf_r+0x1fc>
 8004608:	7821      	ldrb	r1, [r4, #0]
 800460a:	2203      	movs	r2, #3
 800460c:	4650      	mov	r0, sl
 800460e:	f7fb fdef 	bl	80001f0 <memchr>
 8004612:	b140      	cbz	r0, 8004626 <_svfiprintf_r+0x152>
 8004614:	2340      	movs	r3, #64	; 0x40
 8004616:	eba0 000a 	sub.w	r0, r0, sl
 800461a:	fa03 f000 	lsl.w	r0, r3, r0
 800461e:	9b04      	ldr	r3, [sp, #16]
 8004620:	4303      	orrs	r3, r0
 8004622:	3401      	adds	r4, #1
 8004624:	9304      	str	r3, [sp, #16]
 8004626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800462a:	4826      	ldr	r0, [pc, #152]	; (80046c4 <_svfiprintf_r+0x1f0>)
 800462c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004630:	2206      	movs	r2, #6
 8004632:	f7fb fddd 	bl	80001f0 <memchr>
 8004636:	2800      	cmp	r0, #0
 8004638:	d038      	beq.n	80046ac <_svfiprintf_r+0x1d8>
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <_svfiprintf_r+0x1f4>)
 800463c:	bb1b      	cbnz	r3, 8004686 <_svfiprintf_r+0x1b2>
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	3307      	adds	r3, #7
 8004642:	f023 0307 	bic.w	r3, r3, #7
 8004646:	3308      	adds	r3, #8
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464c:	4433      	add	r3, r6
 800464e:	9309      	str	r3, [sp, #36]	; 0x24
 8004650:	e767      	b.n	8004522 <_svfiprintf_r+0x4e>
 8004652:	fb0c 3202 	mla	r2, ip, r2, r3
 8004656:	460c      	mov	r4, r1
 8004658:	2001      	movs	r0, #1
 800465a:	e7a5      	b.n	80045a8 <_svfiprintf_r+0xd4>
 800465c:	2300      	movs	r3, #0
 800465e:	3401      	adds	r4, #1
 8004660:	9305      	str	r3, [sp, #20]
 8004662:	4619      	mov	r1, r3
 8004664:	f04f 0c0a 	mov.w	ip, #10
 8004668:	4620      	mov	r0, r4
 800466a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800466e:	3a30      	subs	r2, #48	; 0x30
 8004670:	2a09      	cmp	r2, #9
 8004672:	d903      	bls.n	800467c <_svfiprintf_r+0x1a8>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0c5      	beq.n	8004604 <_svfiprintf_r+0x130>
 8004678:	9105      	str	r1, [sp, #20]
 800467a:	e7c3      	b.n	8004604 <_svfiprintf_r+0x130>
 800467c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004680:	4604      	mov	r4, r0
 8004682:	2301      	movs	r3, #1
 8004684:	e7f0      	b.n	8004668 <_svfiprintf_r+0x194>
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <_svfiprintf_r+0x1f8>)
 800468e:	a904      	add	r1, sp, #16
 8004690:	4638      	mov	r0, r7
 8004692:	f3af 8000 	nop.w
 8004696:	1c42      	adds	r2, r0, #1
 8004698:	4606      	mov	r6, r0
 800469a:	d1d6      	bne.n	800464a <_svfiprintf_r+0x176>
 800469c:	89ab      	ldrh	r3, [r5, #12]
 800469e:	065b      	lsls	r3, r3, #25
 80046a0:	f53f af2c 	bmi.w	80044fc <_svfiprintf_r+0x28>
 80046a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a6:	b01d      	add	sp, #116	; 0x74
 80046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ac:	ab03      	add	r3, sp, #12
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	462a      	mov	r2, r5
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <_svfiprintf_r+0x1f8>)
 80046b4:	a904      	add	r1, sp, #16
 80046b6:	4638      	mov	r0, r7
 80046b8:	f000 f9d4 	bl	8004a64 <_printf_i>
 80046bc:	e7eb      	b.n	8004696 <_svfiprintf_r+0x1c2>
 80046be:	bf00      	nop
 80046c0:	0800578d 	.word	0x0800578d
 80046c4:	08005797 	.word	0x08005797
 80046c8:	00000000 	.word	0x00000000
 80046cc:	0800441d 	.word	0x0800441d
 80046d0:	08005793 	.word	0x08005793

080046d4 <__sfputc_r>:
 80046d4:	6893      	ldr	r3, [r2, #8]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	b410      	push	{r4}
 80046dc:	6093      	str	r3, [r2, #8]
 80046de:	da08      	bge.n	80046f2 <__sfputc_r+0x1e>
 80046e0:	6994      	ldr	r4, [r2, #24]
 80046e2:	42a3      	cmp	r3, r4
 80046e4:	db01      	blt.n	80046ea <__sfputc_r+0x16>
 80046e6:	290a      	cmp	r1, #10
 80046e8:	d103      	bne.n	80046f2 <__sfputc_r+0x1e>
 80046ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046ee:	f000 baef 	b.w	8004cd0 <__swbuf_r>
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	1c58      	adds	r0, r3, #1
 80046f6:	6010      	str	r0, [r2, #0]
 80046f8:	7019      	strb	r1, [r3, #0]
 80046fa:	4608      	mov	r0, r1
 80046fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004700:	4770      	bx	lr

08004702 <__sfputs_r>:
 8004702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004704:	4606      	mov	r6, r0
 8004706:	460f      	mov	r7, r1
 8004708:	4614      	mov	r4, r2
 800470a:	18d5      	adds	r5, r2, r3
 800470c:	42ac      	cmp	r4, r5
 800470e:	d101      	bne.n	8004714 <__sfputs_r+0x12>
 8004710:	2000      	movs	r0, #0
 8004712:	e007      	b.n	8004724 <__sfputs_r+0x22>
 8004714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004718:	463a      	mov	r2, r7
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff ffda 	bl	80046d4 <__sfputc_r>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d1f3      	bne.n	800470c <__sfputs_r+0xa>
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004728 <_vfiprintf_r>:
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	460d      	mov	r5, r1
 800472e:	b09d      	sub	sp, #116	; 0x74
 8004730:	4614      	mov	r4, r2
 8004732:	4698      	mov	r8, r3
 8004734:	4606      	mov	r6, r0
 8004736:	b118      	cbz	r0, 8004740 <_vfiprintf_r+0x18>
 8004738:	6983      	ldr	r3, [r0, #24]
 800473a:	b90b      	cbnz	r3, 8004740 <_vfiprintf_r+0x18>
 800473c:	f000 fcaa 	bl	8005094 <__sinit>
 8004740:	4b89      	ldr	r3, [pc, #548]	; (8004968 <_vfiprintf_r+0x240>)
 8004742:	429d      	cmp	r5, r3
 8004744:	d11b      	bne.n	800477e <_vfiprintf_r+0x56>
 8004746:	6875      	ldr	r5, [r6, #4]
 8004748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800474a:	07d9      	lsls	r1, r3, #31
 800474c:	d405      	bmi.n	800475a <_vfiprintf_r+0x32>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	059a      	lsls	r2, r3, #22
 8004752:	d402      	bmi.n	800475a <_vfiprintf_r+0x32>
 8004754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004756:	f000 fd3b 	bl	80051d0 <__retarget_lock_acquire_recursive>
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	071b      	lsls	r3, r3, #28
 800475e:	d501      	bpl.n	8004764 <_vfiprintf_r+0x3c>
 8004760:	692b      	ldr	r3, [r5, #16]
 8004762:	b9eb      	cbnz	r3, 80047a0 <_vfiprintf_r+0x78>
 8004764:	4629      	mov	r1, r5
 8004766:	4630      	mov	r0, r6
 8004768:	f000 fb04 	bl	8004d74 <__swsetup_r>
 800476c:	b1c0      	cbz	r0, 80047a0 <_vfiprintf_r+0x78>
 800476e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004770:	07dc      	lsls	r4, r3, #31
 8004772:	d50e      	bpl.n	8004792 <_vfiprintf_r+0x6a>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	b01d      	add	sp, #116	; 0x74
 800477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477e:	4b7b      	ldr	r3, [pc, #492]	; (800496c <_vfiprintf_r+0x244>)
 8004780:	429d      	cmp	r5, r3
 8004782:	d101      	bne.n	8004788 <_vfiprintf_r+0x60>
 8004784:	68b5      	ldr	r5, [r6, #8]
 8004786:	e7df      	b.n	8004748 <_vfiprintf_r+0x20>
 8004788:	4b79      	ldr	r3, [pc, #484]	; (8004970 <_vfiprintf_r+0x248>)
 800478a:	429d      	cmp	r5, r3
 800478c:	bf08      	it	eq
 800478e:	68f5      	ldreq	r5, [r6, #12]
 8004790:	e7da      	b.n	8004748 <_vfiprintf_r+0x20>
 8004792:	89ab      	ldrh	r3, [r5, #12]
 8004794:	0598      	lsls	r0, r3, #22
 8004796:	d4ed      	bmi.n	8004774 <_vfiprintf_r+0x4c>
 8004798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800479a:	f000 fd1a 	bl	80051d2 <__retarget_lock_release_recursive>
 800479e:	e7e9      	b.n	8004774 <_vfiprintf_r+0x4c>
 80047a0:	2300      	movs	r3, #0
 80047a2:	9309      	str	r3, [sp, #36]	; 0x24
 80047a4:	2320      	movs	r3, #32
 80047a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ae:	2330      	movs	r3, #48	; 0x30
 80047b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004974 <_vfiprintf_r+0x24c>
 80047b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b8:	f04f 0901 	mov.w	r9, #1
 80047bc:	4623      	mov	r3, r4
 80047be:	469a      	mov	sl, r3
 80047c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c4:	b10a      	cbz	r2, 80047ca <_vfiprintf_r+0xa2>
 80047c6:	2a25      	cmp	r2, #37	; 0x25
 80047c8:	d1f9      	bne.n	80047be <_vfiprintf_r+0x96>
 80047ca:	ebba 0b04 	subs.w	fp, sl, r4
 80047ce:	d00b      	beq.n	80047e8 <_vfiprintf_r+0xc0>
 80047d0:	465b      	mov	r3, fp
 80047d2:	4622      	mov	r2, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7ff ff93 	bl	8004702 <__sfputs_r>
 80047dc:	3001      	adds	r0, #1
 80047de:	f000 80aa 	beq.w	8004936 <_vfiprintf_r+0x20e>
 80047e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e4:	445a      	add	r2, fp
 80047e6:	9209      	str	r2, [sp, #36]	; 0x24
 80047e8:	f89a 3000 	ldrb.w	r3, [sl]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a2 	beq.w	8004936 <_vfiprintf_r+0x20e>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295
 80047f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fc:	f10a 0a01 	add.w	sl, sl, #1
 8004800:	9304      	str	r3, [sp, #16]
 8004802:	9307      	str	r3, [sp, #28]
 8004804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004808:	931a      	str	r3, [sp, #104]	; 0x68
 800480a:	4654      	mov	r4, sl
 800480c:	2205      	movs	r2, #5
 800480e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004812:	4858      	ldr	r0, [pc, #352]	; (8004974 <_vfiprintf_r+0x24c>)
 8004814:	f7fb fcec 	bl	80001f0 <memchr>
 8004818:	9a04      	ldr	r2, [sp, #16]
 800481a:	b9d8      	cbnz	r0, 8004854 <_vfiprintf_r+0x12c>
 800481c:	06d1      	lsls	r1, r2, #27
 800481e:	bf44      	itt	mi
 8004820:	2320      	movmi	r3, #32
 8004822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004826:	0713      	lsls	r3, r2, #28
 8004828:	bf44      	itt	mi
 800482a:	232b      	movmi	r3, #43	; 0x2b
 800482c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004830:	f89a 3000 	ldrb.w	r3, [sl]
 8004834:	2b2a      	cmp	r3, #42	; 0x2a
 8004836:	d015      	beq.n	8004864 <_vfiprintf_r+0x13c>
 8004838:	9a07      	ldr	r2, [sp, #28]
 800483a:	4654      	mov	r4, sl
 800483c:	2000      	movs	r0, #0
 800483e:	f04f 0c0a 	mov.w	ip, #10
 8004842:	4621      	mov	r1, r4
 8004844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004848:	3b30      	subs	r3, #48	; 0x30
 800484a:	2b09      	cmp	r3, #9
 800484c:	d94e      	bls.n	80048ec <_vfiprintf_r+0x1c4>
 800484e:	b1b0      	cbz	r0, 800487e <_vfiprintf_r+0x156>
 8004850:	9207      	str	r2, [sp, #28]
 8004852:	e014      	b.n	800487e <_vfiprintf_r+0x156>
 8004854:	eba0 0308 	sub.w	r3, r0, r8
 8004858:	fa09 f303 	lsl.w	r3, r9, r3
 800485c:	4313      	orrs	r3, r2
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	46a2      	mov	sl, r4
 8004862:	e7d2      	b.n	800480a <_vfiprintf_r+0xe2>
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	1d19      	adds	r1, r3, #4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	9103      	str	r1, [sp, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	bfbb      	ittet	lt
 8004870:	425b      	neglt	r3, r3
 8004872:	f042 0202 	orrlt.w	r2, r2, #2
 8004876:	9307      	strge	r3, [sp, #28]
 8004878:	9307      	strlt	r3, [sp, #28]
 800487a:	bfb8      	it	lt
 800487c:	9204      	strlt	r2, [sp, #16]
 800487e:	7823      	ldrb	r3, [r4, #0]
 8004880:	2b2e      	cmp	r3, #46	; 0x2e
 8004882:	d10c      	bne.n	800489e <_vfiprintf_r+0x176>
 8004884:	7863      	ldrb	r3, [r4, #1]
 8004886:	2b2a      	cmp	r3, #42	; 0x2a
 8004888:	d135      	bne.n	80048f6 <_vfiprintf_r+0x1ce>
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	1d1a      	adds	r2, r3, #4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	9203      	str	r2, [sp, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfb8      	it	lt
 8004896:	f04f 33ff 	movlt.w	r3, #4294967295
 800489a:	3402      	adds	r4, #2
 800489c:	9305      	str	r3, [sp, #20]
 800489e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004984 <_vfiprintf_r+0x25c>
 80048a2:	7821      	ldrb	r1, [r4, #0]
 80048a4:	2203      	movs	r2, #3
 80048a6:	4650      	mov	r0, sl
 80048a8:	f7fb fca2 	bl	80001f0 <memchr>
 80048ac:	b140      	cbz	r0, 80048c0 <_vfiprintf_r+0x198>
 80048ae:	2340      	movs	r3, #64	; 0x40
 80048b0:	eba0 000a 	sub.w	r0, r0, sl
 80048b4:	fa03 f000 	lsl.w	r0, r3, r0
 80048b8:	9b04      	ldr	r3, [sp, #16]
 80048ba:	4303      	orrs	r3, r0
 80048bc:	3401      	adds	r4, #1
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c4:	482c      	ldr	r0, [pc, #176]	; (8004978 <_vfiprintf_r+0x250>)
 80048c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ca:	2206      	movs	r2, #6
 80048cc:	f7fb fc90 	bl	80001f0 <memchr>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d03f      	beq.n	8004954 <_vfiprintf_r+0x22c>
 80048d4:	4b29      	ldr	r3, [pc, #164]	; (800497c <_vfiprintf_r+0x254>)
 80048d6:	bb1b      	cbnz	r3, 8004920 <_vfiprintf_r+0x1f8>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	3307      	adds	r3, #7
 80048dc:	f023 0307 	bic.w	r3, r3, #7
 80048e0:	3308      	adds	r3, #8
 80048e2:	9303      	str	r3, [sp, #12]
 80048e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e6:	443b      	add	r3, r7
 80048e8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ea:	e767      	b.n	80047bc <_vfiprintf_r+0x94>
 80048ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80048f0:	460c      	mov	r4, r1
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7a5      	b.n	8004842 <_vfiprintf_r+0x11a>
 80048f6:	2300      	movs	r3, #0
 80048f8:	3401      	adds	r4, #1
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	4619      	mov	r1, r3
 80048fe:	f04f 0c0a 	mov.w	ip, #10
 8004902:	4620      	mov	r0, r4
 8004904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004908:	3a30      	subs	r2, #48	; 0x30
 800490a:	2a09      	cmp	r2, #9
 800490c:	d903      	bls.n	8004916 <_vfiprintf_r+0x1ee>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0c5      	beq.n	800489e <_vfiprintf_r+0x176>
 8004912:	9105      	str	r1, [sp, #20]
 8004914:	e7c3      	b.n	800489e <_vfiprintf_r+0x176>
 8004916:	fb0c 2101 	mla	r1, ip, r1, r2
 800491a:	4604      	mov	r4, r0
 800491c:	2301      	movs	r3, #1
 800491e:	e7f0      	b.n	8004902 <_vfiprintf_r+0x1da>
 8004920:	ab03      	add	r3, sp, #12
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	462a      	mov	r2, r5
 8004926:	4b16      	ldr	r3, [pc, #88]	; (8004980 <_vfiprintf_r+0x258>)
 8004928:	a904      	add	r1, sp, #16
 800492a:	4630      	mov	r0, r6
 800492c:	f3af 8000 	nop.w
 8004930:	4607      	mov	r7, r0
 8004932:	1c78      	adds	r0, r7, #1
 8004934:	d1d6      	bne.n	80048e4 <_vfiprintf_r+0x1bc>
 8004936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004938:	07d9      	lsls	r1, r3, #31
 800493a:	d405      	bmi.n	8004948 <_vfiprintf_r+0x220>
 800493c:	89ab      	ldrh	r3, [r5, #12]
 800493e:	059a      	lsls	r2, r3, #22
 8004940:	d402      	bmi.n	8004948 <_vfiprintf_r+0x220>
 8004942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004944:	f000 fc45 	bl	80051d2 <__retarget_lock_release_recursive>
 8004948:	89ab      	ldrh	r3, [r5, #12]
 800494a:	065b      	lsls	r3, r3, #25
 800494c:	f53f af12 	bmi.w	8004774 <_vfiprintf_r+0x4c>
 8004950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004952:	e711      	b.n	8004778 <_vfiprintf_r+0x50>
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	462a      	mov	r2, r5
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <_vfiprintf_r+0x258>)
 800495c:	a904      	add	r1, sp, #16
 800495e:	4630      	mov	r0, r6
 8004960:	f000 f880 	bl	8004a64 <_printf_i>
 8004964:	e7e4      	b.n	8004930 <_vfiprintf_r+0x208>
 8004966:	bf00      	nop
 8004968:	080057e0 	.word	0x080057e0
 800496c:	08005800 	.word	0x08005800
 8004970:	080057c0 	.word	0x080057c0
 8004974:	0800578d 	.word	0x0800578d
 8004978:	08005797 	.word	0x08005797
 800497c:	00000000 	.word	0x00000000
 8004980:	08004703 	.word	0x08004703
 8004984:	08005793 	.word	0x08005793

08004988 <_printf_common>:
 8004988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	4616      	mov	r6, r2
 800498e:	4699      	mov	r9, r3
 8004990:	688a      	ldr	r2, [r1, #8]
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004998:	4293      	cmp	r3, r2
 800499a:	bfb8      	it	lt
 800499c:	4613      	movlt	r3, r2
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049a4:	4607      	mov	r7, r0
 80049a6:	460c      	mov	r4, r1
 80049a8:	b10a      	cbz	r2, 80049ae <_printf_common+0x26>
 80049aa:	3301      	adds	r3, #1
 80049ac:	6033      	str	r3, [r6, #0]
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	0699      	lsls	r1, r3, #26
 80049b2:	bf42      	ittt	mi
 80049b4:	6833      	ldrmi	r3, [r6, #0]
 80049b6:	3302      	addmi	r3, #2
 80049b8:	6033      	strmi	r3, [r6, #0]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	f015 0506 	ands.w	r5, r5, #6
 80049c0:	d106      	bne.n	80049d0 <_printf_common+0x48>
 80049c2:	f104 0a19 	add.w	sl, r4, #25
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	6832      	ldr	r2, [r6, #0]
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dc26      	bgt.n	8004a1e <_printf_common+0x96>
 80049d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049d4:	1e13      	subs	r3, r2, #0
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	bf18      	it	ne
 80049da:	2301      	movne	r3, #1
 80049dc:	0692      	lsls	r2, r2, #26
 80049de:	d42b      	bmi.n	8004a38 <_printf_common+0xb0>
 80049e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e4:	4649      	mov	r1, r9
 80049e6:	4638      	mov	r0, r7
 80049e8:	47c0      	blx	r8
 80049ea:	3001      	adds	r0, #1
 80049ec:	d01e      	beq.n	8004a2c <_printf_common+0xa4>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	68e5      	ldr	r5, [r4, #12]
 80049f2:	6832      	ldr	r2, [r6, #0]
 80049f4:	f003 0306 	and.w	r3, r3, #6
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	bf08      	it	eq
 80049fc:	1aad      	subeq	r5, r5, r2
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	bf0c      	ite	eq
 8004a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a08:	2500      	movne	r5, #0
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bfc4      	itt	gt
 8004a0e:	1a9b      	subgt	r3, r3, r2
 8004a10:	18ed      	addgt	r5, r5, r3
 8004a12:	2600      	movs	r6, #0
 8004a14:	341a      	adds	r4, #26
 8004a16:	42b5      	cmp	r5, r6
 8004a18:	d11a      	bne.n	8004a50 <_printf_common+0xc8>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e008      	b.n	8004a30 <_printf_common+0xa8>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4649      	mov	r1, r9
 8004a24:	4638      	mov	r0, r7
 8004a26:	47c0      	blx	r8
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d103      	bne.n	8004a34 <_printf_common+0xac>
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a34:	3501      	adds	r5, #1
 8004a36:	e7c6      	b.n	80049c6 <_printf_common+0x3e>
 8004a38:	18e1      	adds	r1, r4, r3
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	2030      	movs	r0, #48	; 0x30
 8004a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a42:	4422      	add	r2, r4
 8004a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	e7c7      	b.n	80049e0 <_printf_common+0x58>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4622      	mov	r2, r4
 8004a54:	4649      	mov	r1, r9
 8004a56:	4638      	mov	r0, r7
 8004a58:	47c0      	blx	r8
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	d0e6      	beq.n	8004a2c <_printf_common+0xa4>
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7d9      	b.n	8004a16 <_printf_common+0x8e>
	...

08004a64 <_printf_i>:
 8004a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	4691      	mov	r9, r2
 8004a6c:	7e27      	ldrb	r7, [r4, #24]
 8004a6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a70:	2f78      	cmp	r7, #120	; 0x78
 8004a72:	4680      	mov	r8, r0
 8004a74:	469a      	mov	sl, r3
 8004a76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a7a:	d807      	bhi.n	8004a8c <_printf_i+0x28>
 8004a7c:	2f62      	cmp	r7, #98	; 0x62
 8004a7e:	d80a      	bhi.n	8004a96 <_printf_i+0x32>
 8004a80:	2f00      	cmp	r7, #0
 8004a82:	f000 80d8 	beq.w	8004c36 <_printf_i+0x1d2>
 8004a86:	2f58      	cmp	r7, #88	; 0x58
 8004a88:	f000 80a3 	beq.w	8004bd2 <_printf_i+0x16e>
 8004a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a94:	e03a      	b.n	8004b0c <_printf_i+0xa8>
 8004a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a9a:	2b15      	cmp	r3, #21
 8004a9c:	d8f6      	bhi.n	8004a8c <_printf_i+0x28>
 8004a9e:	a001      	add	r0, pc, #4	; (adr r0, 8004aa4 <_printf_i+0x40>)
 8004aa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004a8d 	.word	0x08004a8d
 8004ab0:	08004a8d 	.word	0x08004a8d
 8004ab4:	08004a8d 	.word	0x08004a8d
 8004ab8:	08004a8d 	.word	0x08004a8d
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004a8d 	.word	0x08004a8d
 8004ac4:	08004a8d 	.word	0x08004a8d
 8004ac8:	08004a8d 	.word	0x08004a8d
 8004acc:	08004a8d 	.word	0x08004a8d
 8004ad0:	08004c1d 	.word	0x08004c1d
 8004ad4:	08004b41 	.word	0x08004b41
 8004ad8:	08004bff 	.word	0x08004bff
 8004adc:	08004a8d 	.word	0x08004a8d
 8004ae0:	08004a8d 	.word	0x08004a8d
 8004ae4:	08004c3f 	.word	0x08004c3f
 8004ae8:	08004a8d 	.word	0x08004a8d
 8004aec:	08004b41 	.word	0x08004b41
 8004af0:	08004a8d 	.word	0x08004a8d
 8004af4:	08004a8d 	.word	0x08004a8d
 8004af8:	08004c07 	.word	0x08004c07
 8004afc:	680b      	ldr	r3, [r1, #0]
 8004afe:	1d1a      	adds	r2, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	600a      	str	r2, [r1, #0]
 8004b04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0a3      	b.n	8004c58 <_printf_i+0x1f4>
 8004b10:	6825      	ldr	r5, [r4, #0]
 8004b12:	6808      	ldr	r0, [r1, #0]
 8004b14:	062e      	lsls	r6, r5, #24
 8004b16:	f100 0304 	add.w	r3, r0, #4
 8004b1a:	d50a      	bpl.n	8004b32 <_printf_i+0xce>
 8004b1c:	6805      	ldr	r5, [r0, #0]
 8004b1e:	600b      	str	r3, [r1, #0]
 8004b20:	2d00      	cmp	r5, #0
 8004b22:	da03      	bge.n	8004b2c <_printf_i+0xc8>
 8004b24:	232d      	movs	r3, #45	; 0x2d
 8004b26:	426d      	negs	r5, r5
 8004b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2c:	485e      	ldr	r0, [pc, #376]	; (8004ca8 <_printf_i+0x244>)
 8004b2e:	230a      	movs	r3, #10
 8004b30:	e019      	b.n	8004b66 <_printf_i+0x102>
 8004b32:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b36:	6805      	ldr	r5, [r0, #0]
 8004b38:	600b      	str	r3, [r1, #0]
 8004b3a:	bf18      	it	ne
 8004b3c:	b22d      	sxthne	r5, r5
 8004b3e:	e7ef      	b.n	8004b20 <_printf_i+0xbc>
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	1d18      	adds	r0, r3, #4
 8004b46:	6008      	str	r0, [r1, #0]
 8004b48:	0628      	lsls	r0, r5, #24
 8004b4a:	d501      	bpl.n	8004b50 <_printf_i+0xec>
 8004b4c:	681d      	ldr	r5, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <_printf_i+0xf2>
 8004b50:	0669      	lsls	r1, r5, #25
 8004b52:	d5fb      	bpl.n	8004b4c <_printf_i+0xe8>
 8004b54:	881d      	ldrh	r5, [r3, #0]
 8004b56:	4854      	ldr	r0, [pc, #336]	; (8004ca8 <_printf_i+0x244>)
 8004b58:	2f6f      	cmp	r7, #111	; 0x6f
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2308      	moveq	r3, #8
 8004b5e:	230a      	movne	r3, #10
 8004b60:	2100      	movs	r1, #0
 8004b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b66:	6866      	ldr	r6, [r4, #4]
 8004b68:	60a6      	str	r6, [r4, #8]
 8004b6a:	2e00      	cmp	r6, #0
 8004b6c:	bfa2      	ittt	ge
 8004b6e:	6821      	ldrge	r1, [r4, #0]
 8004b70:	f021 0104 	bicge.w	r1, r1, #4
 8004b74:	6021      	strge	r1, [r4, #0]
 8004b76:	b90d      	cbnz	r5, 8004b7c <_printf_i+0x118>
 8004b78:	2e00      	cmp	r6, #0
 8004b7a:	d04d      	beq.n	8004c18 <_printf_i+0x1b4>
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b82:	fb03 5711 	mls	r7, r3, r1, r5
 8004b86:	5dc7      	ldrb	r7, [r0, r7]
 8004b88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b8c:	462f      	mov	r7, r5
 8004b8e:	42bb      	cmp	r3, r7
 8004b90:	460d      	mov	r5, r1
 8004b92:	d9f4      	bls.n	8004b7e <_printf_i+0x11a>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d10b      	bne.n	8004bb0 <_printf_i+0x14c>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	07df      	lsls	r7, r3, #31
 8004b9c:	d508      	bpl.n	8004bb0 <_printf_i+0x14c>
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	6861      	ldr	r1, [r4, #4]
 8004ba2:	4299      	cmp	r1, r3
 8004ba4:	bfde      	ittt	le
 8004ba6:	2330      	movle	r3, #48	; 0x30
 8004ba8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bb0:	1b92      	subs	r2, r2, r6
 8004bb2:	6122      	str	r2, [r4, #16]
 8004bb4:	f8cd a000 	str.w	sl, [sp]
 8004bb8:	464b      	mov	r3, r9
 8004bba:	aa03      	add	r2, sp, #12
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4640      	mov	r0, r8
 8004bc0:	f7ff fee2 	bl	8004988 <_printf_common>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d14c      	bne.n	8004c62 <_printf_i+0x1fe>
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	b004      	add	sp, #16
 8004bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd2:	4835      	ldr	r0, [pc, #212]	; (8004ca8 <_printf_i+0x244>)
 8004bd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	680e      	ldr	r6, [r1, #0]
 8004bdc:	061f      	lsls	r7, r3, #24
 8004bde:	f856 5b04 	ldr.w	r5, [r6], #4
 8004be2:	600e      	str	r6, [r1, #0]
 8004be4:	d514      	bpl.n	8004c10 <_printf_i+0x1ac>
 8004be6:	07d9      	lsls	r1, r3, #31
 8004be8:	bf44      	itt	mi
 8004bea:	f043 0320 	orrmi.w	r3, r3, #32
 8004bee:	6023      	strmi	r3, [r4, #0]
 8004bf0:	b91d      	cbnz	r5, 8004bfa <_printf_i+0x196>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f023 0320 	bic.w	r3, r3, #32
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	2310      	movs	r3, #16
 8004bfc:	e7b0      	b.n	8004b60 <_printf_i+0xfc>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f043 0320 	orr.w	r3, r3, #32
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	2378      	movs	r3, #120	; 0x78
 8004c08:	4828      	ldr	r0, [pc, #160]	; (8004cac <_printf_i+0x248>)
 8004c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c0e:	e7e3      	b.n	8004bd8 <_printf_i+0x174>
 8004c10:	065e      	lsls	r6, r3, #25
 8004c12:	bf48      	it	mi
 8004c14:	b2ad      	uxthmi	r5, r5
 8004c16:	e7e6      	b.n	8004be6 <_printf_i+0x182>
 8004c18:	4616      	mov	r6, r2
 8004c1a:	e7bb      	b.n	8004b94 <_printf_i+0x130>
 8004c1c:	680b      	ldr	r3, [r1, #0]
 8004c1e:	6826      	ldr	r6, [r4, #0]
 8004c20:	6960      	ldr	r0, [r4, #20]
 8004c22:	1d1d      	adds	r5, r3, #4
 8004c24:	600d      	str	r5, [r1, #0]
 8004c26:	0635      	lsls	r5, r6, #24
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	d501      	bpl.n	8004c30 <_printf_i+0x1cc>
 8004c2c:	6018      	str	r0, [r3, #0]
 8004c2e:	e002      	b.n	8004c36 <_printf_i+0x1d2>
 8004c30:	0671      	lsls	r1, r6, #25
 8004c32:	d5fb      	bpl.n	8004c2c <_printf_i+0x1c8>
 8004c34:	8018      	strh	r0, [r3, #0]
 8004c36:	2300      	movs	r3, #0
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	4616      	mov	r6, r2
 8004c3c:	e7ba      	b.n	8004bb4 <_printf_i+0x150>
 8004c3e:	680b      	ldr	r3, [r1, #0]
 8004c40:	1d1a      	adds	r2, r3, #4
 8004c42:	600a      	str	r2, [r1, #0]
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7fb fad0 	bl	80001f0 <memchr>
 8004c50:	b108      	cbz	r0, 8004c56 <_printf_i+0x1f2>
 8004c52:	1b80      	subs	r0, r0, r6
 8004c54:	6060      	str	r0, [r4, #4]
 8004c56:	6863      	ldr	r3, [r4, #4]
 8004c58:	6123      	str	r3, [r4, #16]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c60:	e7a8      	b.n	8004bb4 <_printf_i+0x150>
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	4632      	mov	r2, r6
 8004c66:	4649      	mov	r1, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	47d0      	blx	sl
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d0ab      	beq.n	8004bc8 <_printf_i+0x164>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	079b      	lsls	r3, r3, #30
 8004c74:	d413      	bmi.n	8004c9e <_printf_i+0x23a>
 8004c76:	68e0      	ldr	r0, [r4, #12]
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	4298      	cmp	r0, r3
 8004c7c:	bfb8      	it	lt
 8004c7e:	4618      	movlt	r0, r3
 8004c80:	e7a4      	b.n	8004bcc <_printf_i+0x168>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4632      	mov	r2, r6
 8004c86:	4649      	mov	r1, r9
 8004c88:	4640      	mov	r0, r8
 8004c8a:	47d0      	blx	sl
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d09b      	beq.n	8004bc8 <_printf_i+0x164>
 8004c90:	3501      	adds	r5, #1
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	9903      	ldr	r1, [sp, #12]
 8004c96:	1a5b      	subs	r3, r3, r1
 8004c98:	42ab      	cmp	r3, r5
 8004c9a:	dcf2      	bgt.n	8004c82 <_printf_i+0x21e>
 8004c9c:	e7eb      	b.n	8004c76 <_printf_i+0x212>
 8004c9e:	2500      	movs	r5, #0
 8004ca0:	f104 0619 	add.w	r6, r4, #25
 8004ca4:	e7f5      	b.n	8004c92 <_printf_i+0x22e>
 8004ca6:	bf00      	nop
 8004ca8:	0800579e 	.word	0x0800579e
 8004cac:	080057af 	.word	0x080057af

08004cb0 <_sbrk_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d06      	ldr	r5, [pc, #24]	; (8004ccc <_sbrk_r+0x1c>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fc fd2a 	bl	8001714 <_sbrk>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_sbrk_r+0x1a>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_sbrk_r+0x1a>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000340 	.word	0x20000340

08004cd0 <__swbuf_r>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	4605      	mov	r5, r0
 8004cd8:	b118      	cbz	r0, 8004ce2 <__swbuf_r+0x12>
 8004cda:	6983      	ldr	r3, [r0, #24]
 8004cdc:	b90b      	cbnz	r3, 8004ce2 <__swbuf_r+0x12>
 8004cde:	f000 f9d9 	bl	8005094 <__sinit>
 8004ce2:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <__swbuf_r+0x98>)
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	d12b      	bne.n	8004d40 <__swbuf_r+0x70>
 8004ce8:	686c      	ldr	r4, [r5, #4]
 8004cea:	69a3      	ldr	r3, [r4, #24]
 8004cec:	60a3      	str	r3, [r4, #8]
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	071a      	lsls	r2, r3, #28
 8004cf2:	d52f      	bpl.n	8004d54 <__swbuf_r+0x84>
 8004cf4:	6923      	ldr	r3, [r4, #16]
 8004cf6:	b36b      	cbz	r3, 8004d54 <__swbuf_r+0x84>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	6820      	ldr	r0, [r4, #0]
 8004cfc:	1ac0      	subs	r0, r0, r3
 8004cfe:	6963      	ldr	r3, [r4, #20]
 8004d00:	b2f6      	uxtb	r6, r6
 8004d02:	4283      	cmp	r3, r0
 8004d04:	4637      	mov	r7, r6
 8004d06:	dc04      	bgt.n	8004d12 <__swbuf_r+0x42>
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 f92e 	bl	8004f6c <_fflush_r>
 8004d10:	bb30      	cbnz	r0, 8004d60 <__swbuf_r+0x90>
 8004d12:	68a3      	ldr	r3, [r4, #8]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60a3      	str	r3, [r4, #8]
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	6022      	str	r2, [r4, #0]
 8004d1e:	701e      	strb	r6, [r3, #0]
 8004d20:	6963      	ldr	r3, [r4, #20]
 8004d22:	3001      	adds	r0, #1
 8004d24:	4283      	cmp	r3, r0
 8004d26:	d004      	beq.n	8004d32 <__swbuf_r+0x62>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	07db      	lsls	r3, r3, #31
 8004d2c:	d506      	bpl.n	8004d3c <__swbuf_r+0x6c>
 8004d2e:	2e0a      	cmp	r6, #10
 8004d30:	d104      	bne.n	8004d3c <__swbuf_r+0x6c>
 8004d32:	4621      	mov	r1, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	f000 f919 	bl	8004f6c <_fflush_r>
 8004d3a:	b988      	cbnz	r0, 8004d60 <__swbuf_r+0x90>
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <__swbuf_r+0x9c>)
 8004d42:	429c      	cmp	r4, r3
 8004d44:	d101      	bne.n	8004d4a <__swbuf_r+0x7a>
 8004d46:	68ac      	ldr	r4, [r5, #8]
 8004d48:	e7cf      	b.n	8004cea <__swbuf_r+0x1a>
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <__swbuf_r+0xa0>)
 8004d4c:	429c      	cmp	r4, r3
 8004d4e:	bf08      	it	eq
 8004d50:	68ec      	ldreq	r4, [r5, #12]
 8004d52:	e7ca      	b.n	8004cea <__swbuf_r+0x1a>
 8004d54:	4621      	mov	r1, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	f000 f80c 	bl	8004d74 <__swsetup_r>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d0cb      	beq.n	8004cf8 <__swbuf_r+0x28>
 8004d60:	f04f 37ff 	mov.w	r7, #4294967295
 8004d64:	e7ea      	b.n	8004d3c <__swbuf_r+0x6c>
 8004d66:	bf00      	nop
 8004d68:	080057e0 	.word	0x080057e0
 8004d6c:	08005800 	.word	0x08005800
 8004d70:	080057c0 	.word	0x080057c0

08004d74 <__swsetup_r>:
 8004d74:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <__swsetup_r+0xcc>)
 8004d76:	b570      	push	{r4, r5, r6, lr}
 8004d78:	681d      	ldr	r5, [r3, #0]
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	b125      	cbz	r5, 8004d8a <__swsetup_r+0x16>
 8004d80:	69ab      	ldr	r3, [r5, #24]
 8004d82:	b913      	cbnz	r3, 8004d8a <__swsetup_r+0x16>
 8004d84:	4628      	mov	r0, r5
 8004d86:	f000 f985 	bl	8005094 <__sinit>
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <__swsetup_r+0xd0>)
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	d10f      	bne.n	8004db0 <__swsetup_r+0x3c>
 8004d90:	686c      	ldr	r4, [r5, #4]
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d98:	0719      	lsls	r1, r3, #28
 8004d9a:	d42c      	bmi.n	8004df6 <__swsetup_r+0x82>
 8004d9c:	06dd      	lsls	r5, r3, #27
 8004d9e:	d411      	bmi.n	8004dc4 <__swsetup_r+0x50>
 8004da0:	2309      	movs	r3, #9
 8004da2:	6033      	str	r3, [r6, #0]
 8004da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	e03e      	b.n	8004e2e <__swsetup_r+0xba>
 8004db0:	4b25      	ldr	r3, [pc, #148]	; (8004e48 <__swsetup_r+0xd4>)
 8004db2:	429c      	cmp	r4, r3
 8004db4:	d101      	bne.n	8004dba <__swsetup_r+0x46>
 8004db6:	68ac      	ldr	r4, [r5, #8]
 8004db8:	e7eb      	b.n	8004d92 <__swsetup_r+0x1e>
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <__swsetup_r+0xd8>)
 8004dbc:	429c      	cmp	r4, r3
 8004dbe:	bf08      	it	eq
 8004dc0:	68ec      	ldreq	r4, [r5, #12]
 8004dc2:	e7e6      	b.n	8004d92 <__swsetup_r+0x1e>
 8004dc4:	0758      	lsls	r0, r3, #29
 8004dc6:	d512      	bpl.n	8004dee <__swsetup_r+0x7a>
 8004dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dca:	b141      	cbz	r1, 8004dde <__swsetup_r+0x6a>
 8004dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	d002      	beq.n	8004dda <__swsetup_r+0x66>
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f7ff fa77 	bl	80042c8 <_free_r>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	2300      	movs	r3, #0
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	81a3      	strh	r3, [r4, #12]
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	b94b      	cbnz	r3, 8004e0e <__swsetup_r+0x9a>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e04:	d003      	beq.n	8004e0e <__swsetup_r+0x9a>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f000 fa07 	bl	800521c <__smakebuf_r>
 8004e0e:	89a0      	ldrh	r0, [r4, #12]
 8004e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e14:	f010 0301 	ands.w	r3, r0, #1
 8004e18:	d00a      	beq.n	8004e30 <__swsetup_r+0xbc>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60a3      	str	r3, [r4, #8]
 8004e1e:	6963      	ldr	r3, [r4, #20]
 8004e20:	425b      	negs	r3, r3
 8004e22:	61a3      	str	r3, [r4, #24]
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	b943      	cbnz	r3, 8004e3a <__swsetup_r+0xc6>
 8004e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e2c:	d1ba      	bne.n	8004da4 <__swsetup_r+0x30>
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
 8004e30:	0781      	lsls	r1, r0, #30
 8004e32:	bf58      	it	pl
 8004e34:	6963      	ldrpl	r3, [r4, #20]
 8004e36:	60a3      	str	r3, [r4, #8]
 8004e38:	e7f4      	b.n	8004e24 <__swsetup_r+0xb0>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e7f7      	b.n	8004e2e <__swsetup_r+0xba>
 8004e3e:	bf00      	nop
 8004e40:	20000010 	.word	0x20000010
 8004e44:	080057e0 	.word	0x080057e0
 8004e48:	08005800 	.word	0x08005800
 8004e4c:	080057c0 	.word	0x080057c0

08004e50 <abort>:
 8004e50:	b508      	push	{r3, lr}
 8004e52:	2006      	movs	r0, #6
 8004e54:	f000 fa96 	bl	8005384 <raise>
 8004e58:	2001      	movs	r0, #1
 8004e5a:	f7fc fbe3 	bl	8001624 <_exit>
	...

08004e60 <__sflush_r>:
 8004e60:	898a      	ldrh	r2, [r1, #12]
 8004e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	0710      	lsls	r0, r2, #28
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	d458      	bmi.n	8004f20 <__sflush_r+0xc0>
 8004e6e:	684b      	ldr	r3, [r1, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	dc05      	bgt.n	8004e80 <__sflush_r+0x20>
 8004e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc02      	bgt.n	8004e80 <__sflush_r+0x20>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d0f9      	beq.n	8004e7a <__sflush_r+0x1a>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e8c:	682f      	ldr	r7, [r5, #0]
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	d032      	beq.n	8004ef8 <__sflush_r+0x98>
 8004e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	075a      	lsls	r2, r3, #29
 8004e98:	d505      	bpl.n	8004ea6 <__sflush_r+0x46>
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ea0:	b10b      	cbz	r3, 8004ea6 <__sflush_r+0x46>
 8004ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ea4:	1ac0      	subs	r0, r0, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004eac:	6a21      	ldr	r1, [r4, #32]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	d106      	bne.n	8004ec6 <__sflush_r+0x66>
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	291d      	cmp	r1, #29
 8004ebc:	d82c      	bhi.n	8004f18 <__sflush_r+0xb8>
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <__sflush_r+0x108>)
 8004ec0:	40ca      	lsrs	r2, r1
 8004ec2:	07d6      	lsls	r6, r2, #31
 8004ec4:	d528      	bpl.n	8004f18 <__sflush_r+0xb8>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6062      	str	r2, [r4, #4]
 8004eca:	04d9      	lsls	r1, r3, #19
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	d504      	bpl.n	8004edc <__sflush_r+0x7c>
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	d101      	bne.n	8004eda <__sflush_r+0x7a>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b903      	cbnz	r3, 8004edc <__sflush_r+0x7c>
 8004eda:	6560      	str	r0, [r4, #84]	; 0x54
 8004edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d0ca      	beq.n	8004e7a <__sflush_r+0x1a>
 8004ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d002      	beq.n	8004ef2 <__sflush_r+0x92>
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff f9eb 	bl	80042c8 <_free_r>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ef6:	e7c1      	b.n	8004e7c <__sflush_r+0x1c>
 8004ef8:	6a21      	ldr	r1, [r4, #32]
 8004efa:	2301      	movs	r3, #1
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b0      	blx	r6
 8004f00:	1c41      	adds	r1, r0, #1
 8004f02:	d1c7      	bne.n	8004e94 <__sflush_r+0x34>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0c4      	beq.n	8004e94 <__sflush_r+0x34>
 8004f0a:	2b1d      	cmp	r3, #29
 8004f0c:	d001      	beq.n	8004f12 <__sflush_r+0xb2>
 8004f0e:	2b16      	cmp	r3, #22
 8004f10:	d101      	bne.n	8004f16 <__sflush_r+0xb6>
 8004f12:	602f      	str	r7, [r5, #0]
 8004f14:	e7b1      	b.n	8004e7a <__sflush_r+0x1a>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7ad      	b.n	8004e7c <__sflush_r+0x1c>
 8004f20:	690f      	ldr	r7, [r1, #16]
 8004f22:	2f00      	cmp	r7, #0
 8004f24:	d0a9      	beq.n	8004e7a <__sflush_r+0x1a>
 8004f26:	0793      	lsls	r3, r2, #30
 8004f28:	680e      	ldr	r6, [r1, #0]
 8004f2a:	bf08      	it	eq
 8004f2c:	694b      	ldreq	r3, [r1, #20]
 8004f2e:	600f      	str	r7, [r1, #0]
 8004f30:	bf18      	it	ne
 8004f32:	2300      	movne	r3, #0
 8004f34:	eba6 0807 	sub.w	r8, r6, r7
 8004f38:	608b      	str	r3, [r1, #8]
 8004f3a:	f1b8 0f00 	cmp.w	r8, #0
 8004f3e:	dd9c      	ble.n	8004e7a <__sflush_r+0x1a>
 8004f40:	6a21      	ldr	r1, [r4, #32]
 8004f42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f44:	4643      	mov	r3, r8
 8004f46:	463a      	mov	r2, r7
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b0      	blx	r6
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	dc06      	bgt.n	8004f5e <__sflush_r+0xfe>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e78e      	b.n	8004e7c <__sflush_r+0x1c>
 8004f5e:	4407      	add	r7, r0
 8004f60:	eba8 0800 	sub.w	r8, r8, r0
 8004f64:	e7e9      	b.n	8004f3a <__sflush_r+0xda>
 8004f66:	bf00      	nop
 8004f68:	20400001 	.word	0x20400001

08004f6c <_fflush_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	b913      	cbnz	r3, 8004f7c <_fflush_r+0x10>
 8004f76:	2500      	movs	r5, #0
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	b118      	cbz	r0, 8004f86 <_fflush_r+0x1a>
 8004f7e:	6983      	ldr	r3, [r0, #24]
 8004f80:	b90b      	cbnz	r3, 8004f86 <_fflush_r+0x1a>
 8004f82:	f000 f887 	bl	8005094 <__sinit>
 8004f86:	4b14      	ldr	r3, [pc, #80]	; (8004fd8 <_fflush_r+0x6c>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	d11b      	bne.n	8004fc4 <_fflush_r+0x58>
 8004f8c:	686c      	ldr	r4, [r5, #4]
 8004f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ef      	beq.n	8004f76 <_fflush_r+0xa>
 8004f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f98:	07d0      	lsls	r0, r2, #31
 8004f9a:	d404      	bmi.n	8004fa6 <_fflush_r+0x3a>
 8004f9c:	0599      	lsls	r1, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_fflush_r+0x3a>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 f915 	bl	80051d0 <__retarget_lock_acquire_recursive>
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	4621      	mov	r1, r4
 8004faa:	f7ff ff59 	bl	8004e60 <__sflush_r>
 8004fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb0:	07da      	lsls	r2, r3, #31
 8004fb2:	4605      	mov	r5, r0
 8004fb4:	d4e0      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	059b      	lsls	r3, r3, #22
 8004fba:	d4dd      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fbe:	f000 f908 	bl	80051d2 <__retarget_lock_release_recursive>
 8004fc2:	e7d9      	b.n	8004f78 <_fflush_r+0xc>
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <_fflush_r+0x70>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d101      	bne.n	8004fce <_fflush_r+0x62>
 8004fca:	68ac      	ldr	r4, [r5, #8]
 8004fcc:	e7df      	b.n	8004f8e <_fflush_r+0x22>
 8004fce:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <_fflush_r+0x74>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	bf08      	it	eq
 8004fd4:	68ec      	ldreq	r4, [r5, #12]
 8004fd6:	e7da      	b.n	8004f8e <_fflush_r+0x22>
 8004fd8:	080057e0 	.word	0x080057e0
 8004fdc:	08005800 	.word	0x08005800
 8004fe0:	080057c0 	.word	0x080057c0

08004fe4 <std>:
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	4604      	mov	r4, r0
 8004fea:	e9c0 3300 	strd	r3, r3, [r0]
 8004fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ff2:	6083      	str	r3, [r0, #8]
 8004ff4:	8181      	strh	r1, [r0, #12]
 8004ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8004ff8:	81c2      	strh	r2, [r0, #14]
 8004ffa:	6183      	str	r3, [r0, #24]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	2208      	movs	r2, #8
 8005000:	305c      	adds	r0, #92	; 0x5c
 8005002:	f7ff f80f 	bl	8004024 <memset>
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x38>)
 8005008:	6263      	str	r3, [r4, #36]	; 0x24
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <std+0x3c>)
 800500c:	62a3      	str	r3, [r4, #40]	; 0x28
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <std+0x40>)
 8005010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <std+0x44>)
 8005014:	6224      	str	r4, [r4, #32]
 8005016:	6323      	str	r3, [r4, #48]	; 0x30
 8005018:	bd10      	pop	{r4, pc}
 800501a:	bf00      	nop
 800501c:	080053bd 	.word	0x080053bd
 8005020:	080053df 	.word	0x080053df
 8005024:	08005417 	.word	0x08005417
 8005028:	0800543b 	.word	0x0800543b

0800502c <_cleanup_r>:
 800502c:	4901      	ldr	r1, [pc, #4]	; (8005034 <_cleanup_r+0x8>)
 800502e:	f000 b8af 	b.w	8005190 <_fwalk_reent>
 8005032:	bf00      	nop
 8005034:	08004f6d 	.word	0x08004f6d

08005038 <__sfmoreglue>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	1e4a      	subs	r2, r1, #1
 800503c:	2568      	movs	r5, #104	; 0x68
 800503e:	4355      	muls	r5, r2
 8005040:	460e      	mov	r6, r1
 8005042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005046:	f7ff f98f 	bl	8004368 <_malloc_r>
 800504a:	4604      	mov	r4, r0
 800504c:	b140      	cbz	r0, 8005060 <__sfmoreglue+0x28>
 800504e:	2100      	movs	r1, #0
 8005050:	e9c0 1600 	strd	r1, r6, [r0]
 8005054:	300c      	adds	r0, #12
 8005056:	60a0      	str	r0, [r4, #8]
 8005058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800505c:	f7fe ffe2 	bl	8004024 <memset>
 8005060:	4620      	mov	r0, r4
 8005062:	bd70      	pop	{r4, r5, r6, pc}

08005064 <__sfp_lock_acquire>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sfp_lock_acquire+0x8>)
 8005066:	f000 b8b3 	b.w	80051d0 <__retarget_lock_acquire_recursive>
 800506a:	bf00      	nop
 800506c:	2000033c 	.word	0x2000033c

08005070 <__sfp_lock_release>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__sfp_lock_release+0x8>)
 8005072:	f000 b8ae 	b.w	80051d2 <__retarget_lock_release_recursive>
 8005076:	bf00      	nop
 8005078:	2000033c 	.word	0x2000033c

0800507c <__sinit_lock_acquire>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sinit_lock_acquire+0x8>)
 800507e:	f000 b8a7 	b.w	80051d0 <__retarget_lock_acquire_recursive>
 8005082:	bf00      	nop
 8005084:	20000337 	.word	0x20000337

08005088 <__sinit_lock_release>:
 8005088:	4801      	ldr	r0, [pc, #4]	; (8005090 <__sinit_lock_release+0x8>)
 800508a:	f000 b8a2 	b.w	80051d2 <__retarget_lock_release_recursive>
 800508e:	bf00      	nop
 8005090:	20000337 	.word	0x20000337

08005094 <__sinit>:
 8005094:	b510      	push	{r4, lr}
 8005096:	4604      	mov	r4, r0
 8005098:	f7ff fff0 	bl	800507c <__sinit_lock_acquire>
 800509c:	69a3      	ldr	r3, [r4, #24]
 800509e:	b11b      	cbz	r3, 80050a8 <__sinit+0x14>
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a4:	f7ff bff0 	b.w	8005088 <__sinit_lock_release>
 80050a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050ac:	6523      	str	r3, [r4, #80]	; 0x50
 80050ae:	4b13      	ldr	r3, [pc, #76]	; (80050fc <__sinit+0x68>)
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <__sinit+0x6c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80050b6:	42a3      	cmp	r3, r4
 80050b8:	bf04      	itt	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	61a3      	streq	r3, [r4, #24]
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f820 	bl	8005104 <__sfp>
 80050c4:	6060      	str	r0, [r4, #4]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f81c 	bl	8005104 <__sfp>
 80050cc:	60a0      	str	r0, [r4, #8]
 80050ce:	4620      	mov	r0, r4
 80050d0:	f000 f818 	bl	8005104 <__sfp>
 80050d4:	2200      	movs	r2, #0
 80050d6:	60e0      	str	r0, [r4, #12]
 80050d8:	2104      	movs	r1, #4
 80050da:	6860      	ldr	r0, [r4, #4]
 80050dc:	f7ff ff82 	bl	8004fe4 <std>
 80050e0:	68a0      	ldr	r0, [r4, #8]
 80050e2:	2201      	movs	r2, #1
 80050e4:	2109      	movs	r1, #9
 80050e6:	f7ff ff7d 	bl	8004fe4 <std>
 80050ea:	68e0      	ldr	r0, [r4, #12]
 80050ec:	2202      	movs	r2, #2
 80050ee:	2112      	movs	r1, #18
 80050f0:	f7ff ff78 	bl	8004fe4 <std>
 80050f4:	2301      	movs	r3, #1
 80050f6:	61a3      	str	r3, [r4, #24]
 80050f8:	e7d2      	b.n	80050a0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	080055d4 	.word	0x080055d4
 8005100:	0800502d 	.word	0x0800502d

08005104 <__sfp>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	4607      	mov	r7, r0
 8005108:	f7ff ffac 	bl	8005064 <__sfp_lock_acquire>
 800510c:	4b1e      	ldr	r3, [pc, #120]	; (8005188 <__sfp+0x84>)
 800510e:	681e      	ldr	r6, [r3, #0]
 8005110:	69b3      	ldr	r3, [r6, #24]
 8005112:	b913      	cbnz	r3, 800511a <__sfp+0x16>
 8005114:	4630      	mov	r0, r6
 8005116:	f7ff ffbd 	bl	8005094 <__sinit>
 800511a:	3648      	adds	r6, #72	; 0x48
 800511c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005120:	3b01      	subs	r3, #1
 8005122:	d503      	bpl.n	800512c <__sfp+0x28>
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	b30b      	cbz	r3, 800516c <__sfp+0x68>
 8005128:	6836      	ldr	r6, [r6, #0]
 800512a:	e7f7      	b.n	800511c <__sfp+0x18>
 800512c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005130:	b9d5      	cbnz	r5, 8005168 <__sfp+0x64>
 8005132:	4b16      	ldr	r3, [pc, #88]	; (800518c <__sfp+0x88>)
 8005134:	60e3      	str	r3, [r4, #12]
 8005136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800513a:	6665      	str	r5, [r4, #100]	; 0x64
 800513c:	f000 f847 	bl	80051ce <__retarget_lock_init_recursive>
 8005140:	f7ff ff96 	bl	8005070 <__sfp_lock_release>
 8005144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800514c:	6025      	str	r5, [r4, #0]
 800514e:	61a5      	str	r5, [r4, #24]
 8005150:	2208      	movs	r2, #8
 8005152:	4629      	mov	r1, r5
 8005154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005158:	f7fe ff64 	bl	8004024 <memset>
 800515c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005164:	4620      	mov	r0, r4
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005168:	3468      	adds	r4, #104	; 0x68
 800516a:	e7d9      	b.n	8005120 <__sfp+0x1c>
 800516c:	2104      	movs	r1, #4
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff ff62 	bl	8005038 <__sfmoreglue>
 8005174:	4604      	mov	r4, r0
 8005176:	6030      	str	r0, [r6, #0]
 8005178:	2800      	cmp	r0, #0
 800517a:	d1d5      	bne.n	8005128 <__sfp+0x24>
 800517c:	f7ff ff78 	bl	8005070 <__sfp_lock_release>
 8005180:	230c      	movs	r3, #12
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	e7ee      	b.n	8005164 <__sfp+0x60>
 8005186:	bf00      	nop
 8005188:	080055d4 	.word	0x080055d4
 800518c:	ffff0001 	.word	0xffff0001

08005190 <_fwalk_reent>:
 8005190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005194:	4606      	mov	r6, r0
 8005196:	4688      	mov	r8, r1
 8005198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800519c:	2700      	movs	r7, #0
 800519e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051a2:	f1b9 0901 	subs.w	r9, r9, #1
 80051a6:	d505      	bpl.n	80051b4 <_fwalk_reent+0x24>
 80051a8:	6824      	ldr	r4, [r4, #0]
 80051aa:	2c00      	cmp	r4, #0
 80051ac:	d1f7      	bne.n	800519e <_fwalk_reent+0xe>
 80051ae:	4638      	mov	r0, r7
 80051b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051b4:	89ab      	ldrh	r3, [r5, #12]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d907      	bls.n	80051ca <_fwalk_reent+0x3a>
 80051ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051be:	3301      	adds	r3, #1
 80051c0:	d003      	beq.n	80051ca <_fwalk_reent+0x3a>
 80051c2:	4629      	mov	r1, r5
 80051c4:	4630      	mov	r0, r6
 80051c6:	47c0      	blx	r8
 80051c8:	4307      	orrs	r7, r0
 80051ca:	3568      	adds	r5, #104	; 0x68
 80051cc:	e7e9      	b.n	80051a2 <_fwalk_reent+0x12>

080051ce <__retarget_lock_init_recursive>:
 80051ce:	4770      	bx	lr

080051d0 <__retarget_lock_acquire_recursive>:
 80051d0:	4770      	bx	lr

080051d2 <__retarget_lock_release_recursive>:
 80051d2:	4770      	bx	lr

080051d4 <__swhatbuf_r>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	460e      	mov	r6, r1
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	2900      	cmp	r1, #0
 80051de:	b096      	sub	sp, #88	; 0x58
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	da07      	bge.n	80051f6 <__swhatbuf_r+0x22>
 80051e6:	2300      	movs	r3, #0
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	89b3      	ldrh	r3, [r6, #12]
 80051ec:	061a      	lsls	r2, r3, #24
 80051ee:	d410      	bmi.n	8005212 <__swhatbuf_r+0x3e>
 80051f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f4:	e00e      	b.n	8005214 <__swhatbuf_r+0x40>
 80051f6:	466a      	mov	r2, sp
 80051f8:	f000 f946 	bl	8005488 <_fstat_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	dbf2      	blt.n	80051e6 <__swhatbuf_r+0x12>
 8005200:	9a01      	ldr	r2, [sp, #4]
 8005202:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005206:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800520a:	425a      	negs	r2, r3
 800520c:	415a      	adcs	r2, r3
 800520e:	602a      	str	r2, [r5, #0]
 8005210:	e7ee      	b.n	80051f0 <__swhatbuf_r+0x1c>
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	2000      	movs	r0, #0
 8005216:	6023      	str	r3, [r4, #0]
 8005218:	b016      	add	sp, #88	; 0x58
 800521a:	bd70      	pop	{r4, r5, r6, pc}

0800521c <__smakebuf_r>:
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005220:	079d      	lsls	r5, r3, #30
 8005222:	4606      	mov	r6, r0
 8005224:	460c      	mov	r4, r1
 8005226:	d507      	bpl.n	8005238 <__smakebuf_r+0x1c>
 8005228:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	6123      	str	r3, [r4, #16]
 8005230:	2301      	movs	r3, #1
 8005232:	6163      	str	r3, [r4, #20]
 8005234:	b002      	add	sp, #8
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	ab01      	add	r3, sp, #4
 800523a:	466a      	mov	r2, sp
 800523c:	f7ff ffca 	bl	80051d4 <__swhatbuf_r>
 8005240:	9900      	ldr	r1, [sp, #0]
 8005242:	4605      	mov	r5, r0
 8005244:	4630      	mov	r0, r6
 8005246:	f7ff f88f 	bl	8004368 <_malloc_r>
 800524a:	b948      	cbnz	r0, 8005260 <__smakebuf_r+0x44>
 800524c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005250:	059a      	lsls	r2, r3, #22
 8005252:	d4ef      	bmi.n	8005234 <__smakebuf_r+0x18>
 8005254:	f023 0303 	bic.w	r3, r3, #3
 8005258:	f043 0302 	orr.w	r3, r3, #2
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	e7e3      	b.n	8005228 <__smakebuf_r+0xc>
 8005260:	4b0d      	ldr	r3, [pc, #52]	; (8005298 <__smakebuf_r+0x7c>)
 8005262:	62b3      	str	r3, [r6, #40]	; 0x28
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	6020      	str	r0, [r4, #0]
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	81a3      	strh	r3, [r4, #12]
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	6163      	str	r3, [r4, #20]
 8005272:	9b01      	ldr	r3, [sp, #4]
 8005274:	6120      	str	r0, [r4, #16]
 8005276:	b15b      	cbz	r3, 8005290 <__smakebuf_r+0x74>
 8005278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800527c:	4630      	mov	r0, r6
 800527e:	f000 f915 	bl	80054ac <_isatty_r>
 8005282:	b128      	cbz	r0, 8005290 <__smakebuf_r+0x74>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	89a0      	ldrh	r0, [r4, #12]
 8005292:	4305      	orrs	r5, r0
 8005294:	81a5      	strh	r5, [r4, #12]
 8005296:	e7cd      	b.n	8005234 <__smakebuf_r+0x18>
 8005298:	0800502d 	.word	0x0800502d

0800529c <memmove>:
 800529c:	4288      	cmp	r0, r1
 800529e:	b510      	push	{r4, lr}
 80052a0:	eb01 0402 	add.w	r4, r1, r2
 80052a4:	d902      	bls.n	80052ac <memmove+0x10>
 80052a6:	4284      	cmp	r4, r0
 80052a8:	4623      	mov	r3, r4
 80052aa:	d807      	bhi.n	80052bc <memmove+0x20>
 80052ac:	1e43      	subs	r3, r0, #1
 80052ae:	42a1      	cmp	r1, r4
 80052b0:	d008      	beq.n	80052c4 <memmove+0x28>
 80052b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ba:	e7f8      	b.n	80052ae <memmove+0x12>
 80052bc:	4402      	add	r2, r0
 80052be:	4601      	mov	r1, r0
 80052c0:	428a      	cmp	r2, r1
 80052c2:	d100      	bne.n	80052c6 <memmove+0x2a>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ce:	e7f7      	b.n	80052c0 <memmove+0x24>

080052d0 <__malloc_lock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_lock+0x8>)
 80052d2:	f7ff bf7d 	b.w	80051d0 <__retarget_lock_acquire_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000338 	.word	0x20000338

080052dc <__malloc_unlock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_unlock+0x8>)
 80052de:	f7ff bf78 	b.w	80051d2 <__retarget_lock_release_recursive>
 80052e2:	bf00      	nop
 80052e4:	20000338 	.word	0x20000338

080052e8 <_realloc_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	4607      	mov	r7, r0
 80052ec:	4614      	mov	r4, r2
 80052ee:	460e      	mov	r6, r1
 80052f0:	b921      	cbnz	r1, 80052fc <_realloc_r+0x14>
 80052f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052f6:	4611      	mov	r1, r2
 80052f8:	f7ff b836 	b.w	8004368 <_malloc_r>
 80052fc:	b922      	cbnz	r2, 8005308 <_realloc_r+0x20>
 80052fe:	f7fe ffe3 	bl	80042c8 <_free_r>
 8005302:	4625      	mov	r5, r4
 8005304:	4628      	mov	r0, r5
 8005306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005308:	f000 f8f2 	bl	80054f0 <_malloc_usable_size_r>
 800530c:	42a0      	cmp	r0, r4
 800530e:	d20f      	bcs.n	8005330 <_realloc_r+0x48>
 8005310:	4621      	mov	r1, r4
 8005312:	4638      	mov	r0, r7
 8005314:	f7ff f828 	bl	8004368 <_malloc_r>
 8005318:	4605      	mov	r5, r0
 800531a:	2800      	cmp	r0, #0
 800531c:	d0f2      	beq.n	8005304 <_realloc_r+0x1c>
 800531e:	4631      	mov	r1, r6
 8005320:	4622      	mov	r2, r4
 8005322:	f7fe fe71 	bl	8004008 <memcpy>
 8005326:	4631      	mov	r1, r6
 8005328:	4638      	mov	r0, r7
 800532a:	f7fe ffcd 	bl	80042c8 <_free_r>
 800532e:	e7e9      	b.n	8005304 <_realloc_r+0x1c>
 8005330:	4635      	mov	r5, r6
 8005332:	e7e7      	b.n	8005304 <_realloc_r+0x1c>

08005334 <_raise_r>:
 8005334:	291f      	cmp	r1, #31
 8005336:	b538      	push	{r3, r4, r5, lr}
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	d904      	bls.n	8005348 <_raise_r+0x14>
 800533e:	2316      	movs	r3, #22
 8005340:	6003      	str	r3, [r0, #0]
 8005342:	f04f 30ff 	mov.w	r0, #4294967295
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800534a:	b112      	cbz	r2, 8005352 <_raise_r+0x1e>
 800534c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005350:	b94b      	cbnz	r3, 8005366 <_raise_r+0x32>
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f830 	bl	80053b8 <_getpid_r>
 8005358:	462a      	mov	r2, r5
 800535a:	4601      	mov	r1, r0
 800535c:	4620      	mov	r0, r4
 800535e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005362:	f000 b817 	b.w	8005394 <_kill_r>
 8005366:	2b01      	cmp	r3, #1
 8005368:	d00a      	beq.n	8005380 <_raise_r+0x4c>
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	d103      	bne.n	8005376 <_raise_r+0x42>
 800536e:	2316      	movs	r3, #22
 8005370:	6003      	str	r3, [r0, #0]
 8005372:	2001      	movs	r0, #1
 8005374:	e7e7      	b.n	8005346 <_raise_r+0x12>
 8005376:	2400      	movs	r4, #0
 8005378:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800537c:	4628      	mov	r0, r5
 800537e:	4798      	blx	r3
 8005380:	2000      	movs	r0, #0
 8005382:	e7e0      	b.n	8005346 <_raise_r+0x12>

08005384 <raise>:
 8005384:	4b02      	ldr	r3, [pc, #8]	; (8005390 <raise+0xc>)
 8005386:	4601      	mov	r1, r0
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	f7ff bfd3 	b.w	8005334 <_raise_r>
 800538e:	bf00      	nop
 8005390:	20000010 	.word	0x20000010

08005394 <_kill_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d07      	ldr	r5, [pc, #28]	; (80053b4 <_kill_r+0x20>)
 8005398:	2300      	movs	r3, #0
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	4611      	mov	r1, r2
 80053a0:	602b      	str	r3, [r5, #0]
 80053a2:	f7fc f92f 	bl	8001604 <_kill>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d102      	bne.n	80053b0 <_kill_r+0x1c>
 80053aa:	682b      	ldr	r3, [r5, #0]
 80053ac:	b103      	cbz	r3, 80053b0 <_kill_r+0x1c>
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	bd38      	pop	{r3, r4, r5, pc}
 80053b2:	bf00      	nop
 80053b4:	20000340 	.word	0x20000340

080053b8 <_getpid_r>:
 80053b8:	f7fc b91c 	b.w	80015f4 <_getpid>

080053bc <__sread>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	460c      	mov	r4, r1
 80053c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c4:	f000 f89c 	bl	8005500 <_read_r>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	bfab      	itete	ge
 80053cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ce:	89a3      	ldrhlt	r3, [r4, #12]
 80053d0:	181b      	addge	r3, r3, r0
 80053d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053d6:	bfac      	ite	ge
 80053d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053da:	81a3      	strhlt	r3, [r4, #12]
 80053dc:	bd10      	pop	{r4, pc}

080053de <__swrite>:
 80053de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e2:	461f      	mov	r7, r3
 80053e4:	898b      	ldrh	r3, [r1, #12]
 80053e6:	05db      	lsls	r3, r3, #23
 80053e8:	4605      	mov	r5, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	4616      	mov	r6, r2
 80053ee:	d505      	bpl.n	80053fc <__swrite+0x1e>
 80053f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f4:	2302      	movs	r3, #2
 80053f6:	2200      	movs	r2, #0
 80053f8:	f000 f868 	bl	80054cc <_lseek_r>
 80053fc:	89a3      	ldrh	r3, [r4, #12]
 80053fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	4632      	mov	r2, r6
 800540a:	463b      	mov	r3, r7
 800540c:	4628      	mov	r0, r5
 800540e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005412:	f000 b817 	b.w	8005444 <_write_r>

08005416 <__sseek>:
 8005416:	b510      	push	{r4, lr}
 8005418:	460c      	mov	r4, r1
 800541a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541e:	f000 f855 	bl	80054cc <_lseek_r>
 8005422:	1c43      	adds	r3, r0, #1
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	bf15      	itete	ne
 8005428:	6560      	strne	r0, [r4, #84]	; 0x54
 800542a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800542e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005432:	81a3      	strheq	r3, [r4, #12]
 8005434:	bf18      	it	ne
 8005436:	81a3      	strhne	r3, [r4, #12]
 8005438:	bd10      	pop	{r4, pc}

0800543a <__sclose>:
 800543a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543e:	f000 b813 	b.w	8005468 <_close_r>
	...

08005444 <_write_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_write_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fc f90d 	bl	8001672 <_write>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_write_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_write_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000340 	.word	0x20000340

08005468 <_close_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d06      	ldr	r5, [pc, #24]	; (8005484 <_close_r+0x1c>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	f7fc f919 	bl	80016aa <_close>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_close_r+0x1a>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_close_r+0x1a>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000340 	.word	0x20000340

08005488 <_fstat_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	; (80054a8 <_fstat_r+0x20>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	f7fc f914 	bl	80016c2 <_fstat>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d102      	bne.n	80054a4 <_fstat_r+0x1c>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	b103      	cbz	r3, 80054a4 <_fstat_r+0x1c>
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	20000340 	.word	0x20000340

080054ac <_isatty_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	; (80054c8 <_isatty_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc f913 	bl	80016e2 <_isatty>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_isatty_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_isatty_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000340 	.word	0x20000340

080054cc <_lseek_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4d07      	ldr	r5, [pc, #28]	; (80054ec <_lseek_r+0x20>)
 80054d0:	4604      	mov	r4, r0
 80054d2:	4608      	mov	r0, r1
 80054d4:	4611      	mov	r1, r2
 80054d6:	2200      	movs	r2, #0
 80054d8:	602a      	str	r2, [r5, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	f7fc f90c 	bl	80016f8 <_lseek>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d102      	bne.n	80054ea <_lseek_r+0x1e>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b103      	cbz	r3, 80054ea <_lseek_r+0x1e>
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	bd38      	pop	{r3, r4, r5, pc}
 80054ec:	20000340 	.word	0x20000340

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_read_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	; (8005520 <_read_r+0x20>)
 8005504:	4604      	mov	r4, r0
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	2200      	movs	r2, #0
 800550c:	602a      	str	r2, [r5, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	f7fc f892 	bl	8001638 <_read>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_read_r+0x1e>
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	b103      	cbz	r3, 800551e <_read_r+0x1e>
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	20000340 	.word	0x20000340

08005524 <_init>:
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	bf00      	nop
 8005528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552a:	bc08      	pop	{r3}
 800552c:	469e      	mov	lr, r3
 800552e:	4770      	bx	lr

08005530 <_fini>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr
